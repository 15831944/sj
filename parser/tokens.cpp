
#line 3 "parser/tokens.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyg->yytext_ptr -= yyg->yy_more_len; \
	yyleng = (yy_size_t) (yy_cp - yyg->yytext_ptr); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 140
#define YY_END_OF_BUFFER 141
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[470] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  141,  139,   63,  100,
      139,  106,  139,   87,  138,  139,  133,  126,  127,  136,
      134,  130,  135,   93,  137,   97,   97,  131,  101,  122,
      117,  124,   92,   88,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,  107,  108,   64,   86,  139,  128,
      139,  129,    2,    3,    2,    6,    7,    6,   10,   11,
       10,   14,   15,   14,   18,   19,   18,   22,   23,   22,
       26,   27,   26,   63,   99,  121,    0,  105,    0,  109,

        0,    0,  115,  111,  113,  112,  114,    0,   30,  116,
        0,   97,   97,   97,   97,   97,    0,  132,  123,  120,
      125,   90,   89,   91,   94,   94,   31,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   54,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   81,   94,   94,   94,   94,   94,   94,   59,
       94,   94,   94,   94,   94,   94,   94,   94,   94,    0,
      110,    0,    0,    0,    0,    0,    0,    0,  119,    0,
      105,    0,  104,    0,  104,    0,    0,    0,   30,   96,
       98,  118,   82,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   47,   50,   94,   58,   94,   45,   48,   94,
       94,   94,   94,   94,   94,   94,   94,   83,   94,   94,
       94,   94,   53,   85,   84,   94,   94,   94,   94,   94,
       94,   94,   46,   49,   94,   94,   94,   94,   80,    0,
       95,    0,    0,    0,    0,    0,    0,    0,  103,  102,
        0,    0,    0,    0,    0,    0,    0,   29,   96,   96,
       98,   98,   98,   98,   52,   94,   51,   33,   94,   94,
       55,   94,   73,   94,   42,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       65,   94,   94,   37,   62,   94,   39,   43,   94,    0,

        0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
        0,    0,    0,   35,   94,   94,   94,   72,   38,   94,
       94,   94,   94,   94,   94,   44,   94,   94,   94,   94,
       94,   94,   40,   94,   32,   94,   71,   61,    4,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   94,   94,   94,   94,   77,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   66,   74,   94,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       75,   36,   94,   56,   67,   68,   69,   78,   94,   79,
       94,   94,   76,   94,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    5,   94,   94,   94,   94,
       94,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   57,   94,   94,   94,   60,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   94,   94,   94,
        0,    0,    0,    0,    0,   13,    0,    0,    9,    0,
       41,   94,   94,   12,   16,    0,    0,    0,    0,   17,
       21,   34,   70,   20,   24,    0,   25,   28,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   21,   25,   21,   21,   21,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       42,   49,   50,   51,   52,   53,   54,   55,   56,   42,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,

       67,   68,   69,   70,   71,   42,   72,   73,   74,   75,
       76,   77,   42,   78,   79,   80,   81,   82,   83,   84,
       85,   42,   86,   87,   88,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[89] =
    {   0,
        1,    1,    2,    1,    3,    3,    1,    3,    1,    1,
        4,    1,    1,    1,    1,    3,    1,    3,    1,    5,
        5,    5,    5,    5,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    6,    6,    6,    6,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    3,    1,    3,    1,
        7,    3,    6,    6,    6,    6,    6,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[487] =
    {   0,
        0,    0,   86,   87,   88,   89,   90,   91,   92,   93,
       94,   95,   96,   97,   98,   99,  970,  971,  115,  971,
      966,  939,  111,  971,  971,  957,  908,  971,  971,  936,
      104,  971,  105,  971,  107,  152,   68,  935,  971,  934,
      933,  932,  106,  971,   79,   80,  108,   93,  117,  134,
        0,   98,  163,  148,  105,  135,  102,  152,  189,  201,
      117,  188,  177,  136,  971,  971,  971,    0,    0,  971,
      873,  971,  971,  971,  942,  971,  971,  938,  971,  971,
      929,  971,  971,  898,  971,  971,  836,  971,  971,  835,
      971,  971,  832,  126,  971,  819,  136,  971,  142,  971,

      836,  834,  971,  971,  971,  163,  971,  828,    0,  971,
      260,  165,  221,  246,  252,  268,    0,  971,  971,  809,
      971,  971,  971,  971,    0,  186,    0,  179,  176,  197,
      191,  250,  196,  218,  226,  815,  811,  253,  252,  228,
      812,  809,  253,  260,  275,  278,  279,  279,  271,  273,
      288,  285,    0,  303,  293,  310,  283,  306,  307,  306,
      305,  310,  807,  804,  318,  322,  331,  325,  320,  739,
      971,  332,  335,  337,  338,  339,  340,  341,  971,  195,
      372,  392,  971,  744,  705,  372,  658,  125,    0,  395,
      393,  971,    0,  336,  347,  343,  351,  378,  373,  377,

      375,  382,    0,    0,  378,    0,  381,    0,    0,  399,
      392,  398,  402,  402,  399,  416,  424,    0,  423,  419,
      426,  433,    0,    0,    0,  437,  427,  431,  435,  436,
      446,  447,    0,    0,  444,  450,  445,  447,    0,  583,
      971,  596,  439,  443,  458,  454,  446,  461,  971,  971,
      545,  464,  452,  459,  455,  452,  476,  971,  492,  500,
      499,  503,  534,  538,    0,  472,    0,    0,  467,  483,
      486,  498,    0,  490,    0,  515,  514,  512,  517,  523,
      508,  525,  533,  529,  542,  556,  564,  553,  557,  566,
        0,  550,  555,    0,    0,  566,    0,    0,  573,  533,

      579,  563,  580,  575,  566,  571,  971,  586,  580,  595,
      585,  587,  587,    0,  594,  592,  596,    0,    0,  603,
      595,  612,  602,  608,  607,    0,  608,  607,  613,  624,
      623,  615,    0,  629,    0,  634,    0,    0,  971,  624,
      627,  639,  645,  635,  638,  640,  654,  649,  642,  653,
      532,  645,  641,  650,  664,    0,  666,  650,  668,  652,
      672,  665,  682,  666,  681,    0,    0,  672,  529,  672,
      687,  687,  692,  697,  690,  687,  688,  706,  706,  528,
        0,    0,  693,    0,    0,    0,    0,    0,  696,    0,
      705,  698,    0,  702,  501,  719,  710,  705,  725,  712,

      727,  725,  732,  719,  737,  971,  721,  727,  740,  749,
      746,  971,  736,  751,  753,  753,  752,  470,  748,  760,
      384,  762,    0,  753,  756,  763,    0,  373,  294,  772,
      772,  767,  272,  769,  259,  253,  250,  771,  773,  770,
      246,  241,  237,  228,  779,  971,  201,  189,  971,  182,
        0,  770,  774,  971,  971,  149,  147,  136,  130,  971,
      971,    0,    0,  971,  971,  129,  971,  971,  971,  855,
      862,  869,  876,  883,  890,  897,  904,  911,  914,  916,
      923,  930,  937,  944,  947,  951
    } ;

static yyconst flex_int16_t yy_def[487] =
    {   0,
      469,    1,  470,  470,  471,  471,  472,  472,  473,  473,
      474,  474,  475,  475,  476,  476,  469,  469,  469,  469,
      469,  469,  477,  469,  469,  469,  478,  469,  469,  469,
      469,  469,  469,  469,  469,  469,   36,  469,  469,  469,
      469,  469,  469,  469,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  469,  469,  469,  479,  480,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  477,  469,  481,  469,

      469,  482,  469,  469,  469,  469,  469,  483,  484,  469,
      469,   36,  469,  469,  469,  469,  485,  469,  469,  469,
      469,  469,  469,  469,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  486,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  477,
      477,  481,  469,  469,  469,  469,  483,  483,  484,  469,
      485,  469,  479,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  486,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  469,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  469,  469,  469,  469,  469,  469,

      469,  469,  469,  469,  469,  469,  479,  479,  479,  479,
      479,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  479,  479,  479,  479,  479,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  479,  479,  479,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      479,  479,  479,  469,  469,  469,  469,  469,  469,  469,
      469,  479,  479,  469,  469,  469,  469,  469,    0,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469
    } ;

static yyconst flex_int16_t yy_nxt[1060] =
    {   0,
       18,   19,   20,   21,   19,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   37,   37,   37,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   51,   51,   54,   55,   56,   57,   58,   51,   59,
       60,   61,   62,   63,   64,   51,   65,   18,   66,   67,
       68,   69,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   51,   54,   55,   56,   57,   58,   51,   59,   60,
       61,   62,   63,   64,   51,   70,   71,   72,   74,   74,
       77,   77,   80,   80,   83,   83,   86,   86,   89,   89,

       92,   92,   75,   75,   78,   78,   81,   81,   84,   84,
       87,   87,   90,   90,   93,   93,   94,   98,  104,   94,
      108,  106,  469,  122,  126,  109,  128,   94,  127,  132,
       94,  123,  105,  107,  140,  110,  124,  149,  188,  163,
      129,  164,   98,  258,   97,  468,  467,  130,  181,  152,
      153,  469,  466,  126,  131,  128,  136,  127,  137,  132,
      133,  134,  135,  465,  140,  464,  138,  149,   99,  111,
      129,  112,  112,  112,  112,  112,  112,  130,  152,  153,
      139,  150,  169,  131,  154,  141,  151,  142,  147,  133,
      134,  135,  113,   99,  148,  114,  138,  186,  461,  182,

      143,   98,  155,  115,  116,  460,  117,  144,  145,  139,
      150,  169,  146,  167,  154,  151,  168,  459,  147,  469,
      165,  193,  113,  148,  114,  194,  195,  186,  156,  196,
      143,  155,  115,  116,  166,  117,  144,  145,  197,  157,
      159,  146,  158,  167,  457,  200,  168,  160,  469,  161,
      165,  193,   99,  456,  194,  195,  162,  455,  156,  196,
      207,  113,  454,  166,  114,  201,  450,  197,  157,  449,
      159,  158,  115,  116,  200,  448,  160,  202,  161,  190,
      190,  190,  190,  190,  190,  162,  113,  198,  446,  114,
      207,  113,  113,  114,  201,  114,  205,  115,  116,  199,

      206,  115,  116,  115,  116,  210,  202,  211,  113,  212,
      442,  114,  215,  216,  213,  226,  113,  198,  114,  115,
      116,  217,  113,  218,  114,  205,  115,  116,  199,  206,
      214,  219,  115,  116,  210,  220,  211,  221,  113,  212,
      114,  223,  215,  216,  213,  226,  227,  228,  115,  116,
      217,  222,  218,  224,  230,  229,  231,  232,  225,  214,
      219,  235,  236,  237,  220,  238,  242,  221,  239,  243,
      223,  244,  245,  246,  247,  248,  227,  228,   98,  265,
      222,  266,  224,  230,  229,  231,  232,  225,  251,  441,
      235,  267,  236,  237,   97,  238,  242,  239,  181,  243,

      436,  244,  245,  246,  247,  248,  268,  252,  265,  253,
      269,  266,  254,  271,  190,  190,  190,  190,  190,  190,
      267,  255,  256,  270,  257,  272,  273,  274,  275,   99,
      259,  276,  260,  261,  280,  268,  262,  252,  277,  253,
      269,  278,  254,  271,  263,  264,  279,  281,  282,  182,
      255,  256,  270,  257,  272,  273,  274,  275,  283,  285,
      259,  276,  260,  261,  280,  262,  284,  277,  287,  288,
      278,  289,  293,  263,  264,  279,  281,  290,  282,  286,
      291,  292,  294,  295,  296,  297,  433,  298,  283,  285,
      299,  301,  302,  303,  304,  284,  305,  287,  306,  288,

      308,  289,  293,  309,  310,  311,  290,  312,  313,  291,
      292,  314,  294,  295,  296,  297,  298,  412,  315,  299,
      301,  302,  317,  303,  304,  305,  319,  259,  306,  260,
      308,  316,  309,  310,  311,  259,  312,  260,  313,  261,
      325,  314,  262,  261,  406,  395,  262,  315,  380,  339,
      263,  264,  317,  318,  263,  264,  319,  259,  320,  260,
      316,  307,  321,  322,  323,  259,  324,  260,  326,  261,
      325,  262,  327,  261,  261,  262,  328,  262,  261,  263,
      264,  262,  318,  263,  264,  263,  264,  320,  329,  263,
      264,  321,  322,  323,  330,  324,  331,  326,  332,  333,

      334,  337,  327,  335,  261,  328,  262,  336,  261,  338,
      262,  340,  300,  341,  263,  264,  342,  329,  263,  264,
      343,  344,  345,  346,  330,  347,  331,  332,  333,  348,
      334,  337,  335,  349,  350,  351,  336,  352,  353,  338,
      354,  340,  341,  355,  241,  356,  342,  357,  359,  343,
      344,  345,  358,  346,  347,  360,  361,  362,  363,  348,
      364,  365,  349,  350,  351,  366,  352,  353,  367,  354,
      368,  188,  369,  355,  356,  370,  371,  357,  359,  372,
      375,  358,  373,  374,  360,  361,  362,  363,  376,  379,
      364,  365,  377,  378,  366,  381,  382,  383,  367,  384,

      368,  369,  385,  387,  370,  386,  371,  388,  389,  372,
      375,  373,  374,  390,  391,  250,  392,  393,  376,  379,
      394,  377,  378,  396,  381,  382,  383,  397,  399,  384,
      398,  400,  385,  387,  386,  401,  388,  402,  389,  403,
      404,  405,  390,  407,  391,  392,  408,  393,  409,  394,
      410,  411,  396,  413,  249,  414,  415,  397,  399,  398,
      416,  400,  417,  418,  401,  419,  402,  420,  403,  421,
      404,  405,  407,  422,  425,  408,  423,  409,  424,  410,
      411,  426,  427,  413,  414,  415,  428,  429,  430,  431,
      416,  417,  432,  418,  434,  419,  435,  420,  421,  437,

      241,  438,  439,  422,  425,  423,  440,  424,  443,  444,
      463,  426,  427,  445,  447,  428,  451,  429,  430,  431,
      452,  453,  432,  434,  458,  462,  435,  234,  233,  437,
      438,  439,  209,  208,  204,  440,  203,  192,  443,  444,
      463,  188,  445,  447,  185,  451,  183,  179,  178,  452,
      453,  177,  176,  458,  462,   73,   73,   73,   73,   73,
       73,   73,   76,   76,   76,   76,   76,   76,   76,   79,
       79,   79,   79,   79,   79,   79,   82,   82,   82,   82,
       82,   82,   82,   85,   85,   85,   85,   85,   85,   85,
       88,   88,   88,   88,   88,   88,   88,   91,   91,   91,

       91,   91,   91,   91,   97,   97,   97,   97,   97,   97,
       97,  101,  101,  101,  175,  101,  101,  101,  125,  125,
      125,  170,  170,  180,  180,  180,  180,  180,  180,  180,
      184,  184,  184,  184,  184,  184,  184,  187,  187,  187,
      187,  187,  187,  187,  189,  174,  189,  189,  189,  189,
      189,  191,  191,  240,  173,  240,  240,  240,  172,  171,
      121,  120,  119,  118,  103,  102,  100,   96,   95,  469,
       17,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469
    } ;

static yyconst flex_int16_t yy_chk[1060] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        5,    6,    7,    8,    9,   10,   11,   12,   13,   14,

       15,   16,    3,    4,    5,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   19,   23,   31,   19,
       35,   33,   37,   43,   45,   35,   46,   94,   45,   48,
       94,   43,   31,   33,   52,   35,   43,   55,  188,   61,
       47,   61,   97,  188,   99,  466,  459,   47,   99,   57,
       57,   37,  458,   45,   47,   46,   50,   45,   50,   48,
       49,   49,   49,  457,   52,  456,   50,   55,   23,   36,
       47,   36,   36,   36,   36,   36,   36,   47,   57,   57,
       50,   56,   64,   47,   58,   53,   56,   53,   54,   49,
       49,   49,   36,   97,   54,   36,   50,  106,  450,   99,

       53,  180,   58,   36,   36,  448,   36,   53,   53,   50,
       56,   64,   53,   63,   58,   56,   63,  447,   54,  112,
       62,  126,   36,   54,   36,  128,  129,  106,   59,  130,
       53,   58,   36,   36,   62,   36,   53,   53,  131,   59,
       60,   53,   59,   63,  444,  133,   63,   60,  112,   60,
       62,  126,  180,  443,  128,  129,   60,  442,   59,  130,
      140,  113,  441,   62,  113,  134,  437,  131,   59,  436,
       60,   59,  113,  113,  133,  435,   60,  135,   60,  111,
      111,  111,  111,  111,  111,   60,  114,  132,  433,  114,
      140,  113,  115,  113,  134,  115,  138,  114,  114,  132,

      139,  113,  113,  115,  115,  143,  135,  144,  116,  145,
      429,  116,  147,  148,  146,  157,  114,  132,  114,  116,
      116,  149,  115,  150,  115,  138,  114,  114,  132,  139,
      146,  151,  115,  115,  143,  152,  144,  154,  116,  145,
      116,  155,  147,  148,  146,  157,  158,  159,  116,  116,
      149,  154,  150,  156,  160,  159,  161,  162,  156,  146,
      151,  165,  166,  167,  152,  168,  172,  154,  169,  173,
      155,  174,  175,  176,  177,  178,  158,  159,  181,  194,
      154,  195,  156,  160,  159,  161,  162,  156,  186,  428,
      165,  196,  166,  167,  182,  168,  172,  169,  182,  173,

      421,  174,  175,  176,  177,  178,  197,  186,  194,  186,
      198,  195,  186,  200,  190,  190,  190,  190,  190,  190,
      196,  186,  186,  199,  186,  201,  202,  205,  207,  181,
      190,  210,  190,  191,  214,  197,  191,  186,  211,  186,
      198,  212,  186,  200,  191,  191,  213,  215,  216,  182,
      186,  186,  199,  186,  201,  202,  205,  207,  217,  220,
      190,  210,  190,  191,  214,  191,  219,  211,  221,  222,
      212,  226,  230,  191,  191,  213,  215,  227,  216,  220,
      228,  229,  231,  232,  235,  236,  418,  237,  217,  220,
      238,  243,  244,  245,  246,  219,  247,  221,  248,  222,

      252,  226,  230,  253,  254,  255,  227,  256,  257,  228,
      229,  266,  231,  232,  235,  236,  237,  395,  269,  238,
      243,  244,  271,  245,  246,  247,  274,  259,  248,  259,
      252,  270,  253,  254,  255,  260,  256,  260,  257,  261,
      281,  266,  261,  262,  380,  369,  262,  269,  351,  300,
      261,  261,  271,  272,  262,  262,  274,  259,  276,  259,
      270,  251,  277,  278,  279,  260,  280,  260,  282,  261,
      281,  261,  283,  262,  263,  262,  284,  263,  264,  261,
      261,  264,  272,  262,  262,  263,  263,  276,  285,  264,
      264,  277,  278,  279,  286,  280,  287,  282,  288,  289,

      290,  296,  283,  292,  263,  284,  263,  293,  264,  299,
      264,  301,  242,  302,  263,  263,  303,  285,  264,  264,
      304,  305,  306,  308,  286,  309,  287,  288,  289,  310,
      290,  296,  292,  311,  312,  313,  293,  315,  316,  299,
      317,  301,  302,  320,  240,  321,  303,  322,  324,  304,
      305,  306,  323,  308,  309,  325,  327,  328,  329,  310,
      330,  331,  311,  312,  313,  332,  315,  316,  334,  317,
      336,  187,  340,  320,  321,  341,  342,  322,  324,  343,
      346,  323,  344,  345,  325,  327,  328,  329,  347,  350,
      330,  331,  348,  349,  332,  352,  353,  354,  334,  355,

      336,  340,  357,  359,  341,  358,  342,  360,  361,  343,
      346,  344,  345,  362,  363,  185,  364,  365,  347,  350,
      368,  348,  349,  370,  352,  353,  354,  371,  373,  355,
      372,  374,  357,  359,  358,  375,  360,  376,  361,  377,
      378,  379,  362,  383,  363,  364,  389,  365,  391,  368,
      392,  394,  370,  396,  184,  397,  398,  371,  373,  372,
      399,  374,  400,  401,  375,  402,  376,  403,  377,  404,
      378,  379,  383,  405,  409,  389,  407,  391,  408,  392,
      394,  410,  411,  396,  397,  398,  413,  414,  415,  416,
      399,  400,  417,  401,  419,  402,  420,  403,  404,  422,

      170,  424,  425,  405,  409,  407,  426,  408,  430,  431,
      453,  410,  411,  432,  434,  413,  438,  414,  415,  416,
      439,  440,  417,  419,  445,  452,  420,  164,  163,  422,
      424,  425,  142,  141,  137,  426,  136,  120,  430,  431,
      453,  108,  432,  434,  102,  438,  101,   96,   93,  439,
      440,   90,   87,  445,  452,  470,  470,  470,  470,  470,
      470,  470,  471,  471,  471,  471,  471,  471,  471,  472,
      472,  472,  472,  472,  472,  472,  473,  473,  473,  473,
      473,  473,  473,  474,  474,  474,  474,  474,  474,  474,
      475,  475,  475,  475,  475,  475,  475,  476,  476,  476,

      476,  476,  476,  476,  477,  477,  477,  477,  477,  477,
      477,  478,  478,  478,   84,  478,  478,  478,  479,  479,
      479,  480,  480,  481,  481,  481,  481,  481,  481,  481,
      482,  482,  482,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  483,  483,  484,   81,  484,  484,  484,  484,
      484,  485,  485,  486,   78,  486,  486,  486,   75,   71,
       42,   41,   40,   38,   30,   27,   26,   22,   21,   17,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yyg->yy_more_flag = 1)
#define YY_MORE_ADJ yyg->yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#include <sjc.h>
#include "parser.hpp"

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#endif

struct YYLOCATION {
    int l;
    int c;
};
#define YY_EXTRA_TYPE YYLOCATION

void updateLocation(YYLOCATION& loc, const char* s, const size_t len) {
	size_t lastReturn = 0;
	for (size_t i = 0; i < len; i++) {
		if (s[i] == '\n') {
			loc.l++;
			loc.c = 0;
			lastReturn = 0;
		}
	}
	loc.c += (int)(len - lastReturn);
}

#define SAVE_LOC yylloc_param->first_line = yyg->yyextra_r.l; yylloc_param->first_column = yyg->yyextra_r.c; updateLocation(yyg->yyextra_r, yytext, yyleng)
#define TOKEN_STR(t, leftTrim, rightTrim) SAVE_LOC; yylval->string = new std::string(yytext + (size_t)leftTrim, yyleng - (size_t)leftTrim - (size_t)rightTrim); return t
#define TOKEN_VAL(t) SAVE_LOC; yylval->token = t; return t

#define INITIAL 0
#define CBLOCK 1
#define CVAR 2
#define CSTRUCT 3
#define CDEFINE 4
#define CINCLUDE 5
#define CTYPEDEF 6
#define CFUNCTION 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
    static int yy_top_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yyg->yy_more_len = 0;
		if ( yyg->yy_more_flag )
			{
			yyg->yy_more_len = yyg->yy_c_buf_p - yyg->yytext_ptr;
			yyg->yy_more_flag = 0;
			}
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 470 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 469 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ BEGIN(CBLOCK); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ yymore(); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ TOKEN_STR(TCBLOCK, 0, 1); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ BEGIN(INITIAL); TOKEN_STR(TCBLOCK, 0, 5); }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ BEGIN(CVAR); }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ yymore(); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{ TOKEN_STR(TCVAR, 0, 1); }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ BEGIN(INITIAL); TOKEN_STR(TCVAR, 0, 8); }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ BEGIN(CSTRUCT); }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ yymore(); }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{ TOKEN_STR(TCSTRUCT, 0, 1); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ BEGIN(INITIAL); TOKEN_STR(TCSTRUCT, 0, 11); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ BEGIN(CDEFINE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ yymore(); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ TOKEN_STR(TCDEFINE, 0, 1); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ BEGIN(INITIAL); TOKEN_STR(TCDEFINE, 0, 11); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ BEGIN(CINCLUDE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ yymore(); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{ TOKEN_STR(TCINCLUDE, 0, 1); }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ BEGIN(INITIAL); TOKEN_STR(TCINCLUDE, 0, 12); }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ BEGIN(CTYPEDEF); }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ yymore(); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{ TOKEN_STR(TCTYPEDEF, 0, 1); }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ BEGIN(INITIAL); TOKEN_STR(TCTYPEDEF, 0, 12); }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ BEGIN(CFUNCTION); }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ yymore(); }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ TOKEN_STR(TCFUNCTION, 0, 1); }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ BEGIN(INITIAL); TOKEN_STR(TCFUNCTION, 0, 13); }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
TOKEN_VAL(TEND);
	YY_BREAK
case 30:
YY_RULE_SETUP
TOKEN_VAL(TEND);
	YY_BREAK
case 31:
YY_RULE_SETUP
TOKEN_VAL(TAS);
	YY_BREAK
case 32:
YY_RULE_SETUP
TOKEN_VAL(TTHROW);
	YY_BREAK
case 33:
YY_RULE_SETUP
TOKEN_VAL(TCOPY);
	YY_BREAK
case 34:
YY_RULE_SETUP
TOKEN_VAL(TOPTIONALCOPY);
	YY_BREAK
case 35:
YY_RULE_SETUP
TOKEN_VAL(TCATCH);
	YY_BREAK
case 36:
YY_RULE_SETUP
TOKEN_VAL(TDESTROY);
	YY_BREAK
case 37:
YY_RULE_SETUP
TOKEN_VAL(TTRUE);
	YY_BREAK
case 38:
YY_RULE_SETUP
TOKEN_VAL(TFALSE);
	YY_BREAK
case 39:
YY_RULE_SETUP
TOKEN_VAL(TVOID);
	YY_BREAK
case 40:
YY_RULE_SETUP
TOKEN_VAL(TSTACK);
	YY_BREAK
case 41:
YY_RULE_SETUP
TOKEN_VAL(TMATCHRETURN);
	YY_BREAK
case 42:
YY_RULE_SETUP
TOKEN_VAL(THEAP);
	YY_BREAK
case 43:
YY_RULE_SETUP
TOKEN_VAL(TWEAK);
	YY_BREAK
case 44:
YY_RULE_SETUP
TOKEN_VAL(TLOCAL);
	YY_BREAK
case 45:
YY_RULE_SETUP
TOKEN_VAL(TTYPEI32);
	YY_BREAK
case 46:
YY_RULE_SETUP
TOKEN_VAL(TTYPEU32);
	YY_BREAK
case 47:
YY_RULE_SETUP
TOKEN_VAL(TTYPEF32);
	YY_BREAK
case 48:
YY_RULE_SETUP
TOKEN_VAL(TTYPEI64);
	YY_BREAK
case 49:
YY_RULE_SETUP
TOKEN_VAL(TTYPEU64);
	YY_BREAK
case 50:
YY_RULE_SETUP
TOKEN_VAL(TTYPEF64);
	YY_BREAK
case 51:
YY_RULE_SETUP
TOKEN_VAL(TTYPECHAR);
	YY_BREAK
case 52:
YY_RULE_SETUP
TOKEN_VAL(TTYPEBOOL);
	YY_BREAK
case 53:
YY_RULE_SETUP
TOKEN_VAL(TTYPEPTR);
	YY_BREAK
case 54:
YY_RULE_SETUP
TOKEN_VAL(TIF);
	YY_BREAK
case 55:
YY_RULE_SETUP
TOKEN_VAL(TELSE);
	YY_BREAK
case 56:
YY_RULE_SETUP
TOKEN_VAL(TIFVALID);
	YY_BREAK
case 57:
YY_RULE_SETUP
TOKEN_VAL(TELSEEMPTY);
	YY_BREAK
case 58:
YY_RULE_SETUP
TOKEN_VAL(TFOR);
	YY_BREAK
case 59:
YY_RULE_SETUP
TOKEN_VAL(TTO);
	YY_BREAK
case 60:
YY_RULE_SETUP
TOKEN_VAL(TTOREVERSE);
	YY_BREAK
case 61:
YY_RULE_SETUP
TOKEN_VAL(TWHILE);
	YY_BREAK
case 62:
YY_RULE_SETUP
TOKEN_VAL(TTYPE);
	YY_BREAK
case 63:
YY_RULE_SETUP
SAVE_LOC; 
	YY_BREAK
case 64:
YY_RULE_SETUP
TOKEN_VAL(TCARET);
	YY_BREAK
case 65:
YY_RULE_SETUP
TOKEN_VAL(TTHIS);
	YY_BREAK
case 66:
YY_RULE_SETUP
TOKEN_VAL(TPARENT);
	YY_BREAK
case 67:
YY_RULE_SETUP
TOKEN_VAL(TINCLUDE);
	YY_BREAK
case 68:
YY_RULE_SETUP
TOKEN_VAL(TISEMPTY);
	YY_BREAK
case 69:
YY_RULE_SETUP
TOKEN_VAL(TISVALID);
	YY_BREAK
case 70:
YY_RULE_SETUP
TOKEN_VAL(TGETVALUE);
	YY_BREAK
case 71:
YY_RULE_SETUP
TOKEN_VAL(TVALID);
	YY_BREAK
case 72:
YY_RULE_SETUP
TOKEN_VAL(TEMPTY);
	YY_BREAK
case 73:
YY_RULE_SETUP
TOKEN_VAL(TENUM);
	YY_BREAK
case 74:
YY_RULE_SETUP
TOKEN_VAL(TSWITCH);
	YY_BREAK
case 75:
YY_RULE_SETUP
TOKEN_VAL(TDEFAULT);
	YY_BREAK
case 76:
YY_RULE_SETUP
TOKEN_VAL(TPACKAGE);
	YY_BREAK
case 77:
YY_RULE_SETUP
TOKEN_VAL(TIMPORT);
	YY_BREAK
case 78:
YY_RULE_SETUP
TOKEN_VAL(TLIBRARY);
	YY_BREAK
case 79:
YY_RULE_SETUP
TOKEN_VAL(TNULLPTR);	
	YY_BREAK
case 80:
YY_RULE_SETUP
TOKEN_VAL(TBOOLXOR);
	YY_BREAK
case 81:
YY_RULE_SETUP
TOKEN_VAL(TBOOLOR);
	YY_BREAK
case 82:
YY_RULE_SETUP
TOKEN_VAL(TBOOLAND);
	YY_BREAK
case 83:
YY_RULE_SETUP
TOKEN_VAL(TBOOLNOT);
	YY_BREAK
case 84:
YY_RULE_SETUP
TOKEN_VAL(TBOOLSHR);
	YY_BREAK
case 85:
YY_RULE_SETUP
TOKEN_VAL(TBOOLSHL);
	YY_BREAK
case 86:
YY_RULE_SETUP
TOKEN_VAL(TUNDERSCORE);
	YY_BREAK
case 87:
YY_RULE_SETUP
TOKEN_VAL(THASH);
	YY_BREAK
case 88:
YY_RULE_SETUP
TOKEN_VAL(TAT);
	YY_BREAK
case 89:
YY_RULE_SETUP
TOKEN_VAL(TQUESTIONCOLON);
	YY_BREAK
case 90:
YY_RULE_SETUP
TOKEN_VAL(TQUESTIONDOT);
	YY_BREAK
case 91:
YY_RULE_SETUP
TOKEN_VAL(TQUESTIONQUESTION);
	YY_BREAK
case 92:
YY_RULE_SETUP
TOKEN_VAL(TQUESTION);
	YY_BREAK
case 93:
YY_RULE_SETUP
TOKEN_VAL(TDOT);
	YY_BREAK
case 94:
YY_RULE_SETUP
TOKEN_STR(TIDENTIFIER, 0, 0);
	YY_BREAK
case 95:
YY_RULE_SETUP
TOKEN_STR(TQUOTEDIDENTIFIER, 1, 1);
	YY_BREAK
case 96:
YY_RULE_SETUP
TOKEN_STR(TDOUBLE, 0, 0);
	YY_BREAK
case 97:
YY_RULE_SETUP
TOKEN_STR(TINTEGER, 0, 0);
	YY_BREAK
case 98:
YY_RULE_SETUP
TOKEN_STR(TINTEGER, 0, 0);
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
TOKEN_VAL(TEND);
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
TOKEN_VAL(TEND);
	YY_BREAK
case 101:
YY_RULE_SETUP
TOKEN_VAL(TEND);
	YY_BREAK
case 102:
YY_RULE_SETUP
TOKEN_STR(TCHAR, 1, 1);
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
TOKEN_STR(TCHAR, 1, 1);
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
TOKEN_STR(TCHAR, 1, 1);
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
TOKEN_STR(TSTRING, 1, 1);
	YY_BREAK
case 106:
YY_RULE_SETUP
TOKEN_VAL(TEXCLAIM);
	YY_BREAK
case 107:
YY_RULE_SETUP
TOKEN_VAL(TLBRACKET);
	YY_BREAK
case 108:
YY_RULE_SETUP
TOKEN_VAL(TRBRACKET);
	YY_BREAK
case 109:
YY_RULE_SETUP
TOKEN_VAL(TAND);
	YY_BREAK
case 110:
YY_RULE_SETUP
TOKEN_VAL(TOR);
	YY_BREAK
case 111:
YY_RULE_SETUP
TOKEN_VAL(TPLUSPLUS);
	YY_BREAK
case 112:
YY_RULE_SETUP
TOKEN_VAL(TMINUSMINUS);
	YY_BREAK
case 113:
YY_RULE_SETUP
TOKEN_VAL(TPLUSEQUAL);
	YY_BREAK
case 114:
YY_RULE_SETUP
TOKEN_VAL(TMINUSEQUAL);
	YY_BREAK
case 115:
YY_RULE_SETUP
TOKEN_VAL(TMULEQUAL);
	YY_BREAK
case 116:
YY_RULE_SETUP
TOKEN_VAL(TDIVEQUAL);
	YY_BREAK
case 117:
YY_RULE_SETUP
TOKEN_VAL(TEQUAL);
	YY_BREAK
case 118:
YY_RULE_SETUP
TOKEN_VAL(TCPEQ);
	YY_BREAK
case 119:
YY_RULE_SETUP
TOKEN_VAL(TCPNE);
	YY_BREAK
case 120:
YY_RULE_SETUP
TOKEN_VAL(TCEQ);
	YY_BREAK
case 121:
YY_RULE_SETUP
TOKEN_VAL(TCNE);
	YY_BREAK
case 122:
YY_RULE_SETUP
TOKEN_VAL(TCLT);
	YY_BREAK
case 123:
YY_RULE_SETUP
TOKEN_VAL(TCLE);
	YY_BREAK
case 124:
YY_RULE_SETUP
TOKEN_VAL(TCGT);
	YY_BREAK
case 125:
YY_RULE_SETUP
TOKEN_VAL(TCGE);
	YY_BREAK
case 126:
YY_RULE_SETUP
TOKEN_VAL(TLPAREN);
	YY_BREAK
case 127:
YY_RULE_SETUP
TOKEN_VAL(TRPAREN);
	YY_BREAK
case 128:
YY_RULE_SETUP
TOKEN_VAL(TLBRACE);
	YY_BREAK
case 129:
YY_RULE_SETUP
TOKEN_VAL(TRBRACE);
	YY_BREAK
case 130:
YY_RULE_SETUP
TOKEN_VAL(TCOMMA);
	YY_BREAK
case 131:
YY_RULE_SETUP
TOKEN_VAL(TCOLON);
	YY_BREAK
case 132:
YY_RULE_SETUP
TOKEN_VAL(TCOLONEQUAL);
	YY_BREAK
case 133:
YY_RULE_SETUP
TOKEN_VAL(TQUOTE);
	YY_BREAK
case 134:
YY_RULE_SETUP
TOKEN_VAL(TPLUS);
	YY_BREAK
case 135:
YY_RULE_SETUP
TOKEN_VAL(TMINUS);
	YY_BREAK
case 136:
YY_RULE_SETUP
TOKEN_VAL(TMUL);
	YY_BREAK
case 137:
YY_RULE_SETUP
TOKEN_VAL(TDIV);
	YY_BREAK
case 138:
YY_RULE_SETUP
TOKEN_VAL(TMOD);
	YY_BREAK
case 139:
YY_RULE_SETUP
TOKEN_STR(TINVALID, 0, 0);
	YY_BREAK
case 140:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CBLOCK):
case YY_STATE_EOF(CVAR):
case YY_STATE_EOF(CSTRUCT):
case YY_STATE_EOF(CDEFINE):
case YY_STATE_EOF(CINCLUDE):
case YY_STATE_EOF(CTYPEDEF):
case YY_STATE_EOF(CFUNCTION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 470 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 470 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 469);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"


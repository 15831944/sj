-- nau --
* 3d picker
	* find element with hit test
	* 

-- ui --
* load obj file: http://kixor.net/dev/objloader/ https://code.google.com/archive/p/saitoobjloader/ http://people.sc.fsu.edu/%7Ejburkardt/data/obj/obj.html
* sphere - default to front of sphere being middle of texture
* center text

-- language --
* enum
* package/import
* lambda
* map
* weak pointer
* stack optional
* stack interface
* improve debug out for interfaces
* override interfaces : a as type   -> a.asType()'t
* interface as struct heap: { _parent, _vtbl, _destroy } or stack: { _parent, _vtbl }

-- enum --
// no values
enum bar {
	a
	b
	c
}

// all values
enum bar2 {
	a : 0
	b : 1
	c : 2
}

b : 'bar
b : bar.a

-- package/import --
package foo
class() { this }
x := 0	
x += 1

package foo.bar
bob() { this }

foo.class()
foo.x
foo.bar.bob()

import foo
class()
bar.bob()

import f : foo
f.class()
f.bar.bob()

-- lambda --
count := 0
a : [1, 2, 3]
a.map((y : 'i32) {
	count += y
})
===
count := 0
a : [1, 2, 3]
lambda1(
	count := 'i32
	invoke(y : 'i32) {
		count += y
	}
) 
lambda1 : lambda1(count := count)
a.map(lambda1.invoke)
count = lambda1.count


* fix mac build:
brew install llvm && rm /usr/local/opt/emscripten/libexec/llvm/bin/llvm-ar && ln -s /usr/local/opt/llvm/bin/llvm-ar /usr/local/opt/emscripten/libexec/llvm/bin/llvm-ar
anon1()'anon1 {
  this
}

anon2()'anon2 {
  this
}

anon3()'anon3 {
  this
}

anon4()'anon4 {
  this
}

array!char([stack]size'i32=, [stack]data'ptr=, [stack]_isGlobal'bool=)'array_char {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)calloc(_this->size * sizeof(#type(t)), 1);
			if (!_this->data) {
				printf("grow: out of memory\n");
				exit(-1);				
			}
		}
	
}c
  this
}

array_getAt([heap]index'i32:)'char c{

		#forceParent()

		if (index >= _parent->size || index < 0) {
			printf("getAt: out of bounds\n");
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
		#type(t) val = p[index];
##if !#isValue(t)
		if (val == 0) {
			printf("getAt: value is not defined at %d\n", index);
			exit(-1);
		}
##endif
		*_return = val;		
	
}c

array_grow([stack]newSize'i32:)'array_char c{

		#forceParent()
		#include(<string.h>)

		if (_parent->size != newSize) {
			if (newSize < _parent->size) {
				printf("grow: new size smaller than old size %d:%d\n", newSize, _parent->size);
				exit(-1);
			}
			
			if (_parent->_isGlobal) {
				_parent->_isGlobal = false;
				#type(t)* p = (#type(t)*)_parent->data;
				_parent->data = (uintptr_t)calloc(newSize * sizeof(#type(t)), 1);
				if (!_parent->data) {
					printf("grow: out of memory\n");
					exit(-1);				
				}
				memcpy((void*)_parent->data, p, _parent->size * sizeof(#type(t)));
			} else {
				_parent->data = (uintptr_t)realloc((void*)_parent->data, newSize * sizeof(#type(t)));
				if (!_parent->data) {
					printf("grow: out of memory\n");
					exit(-1);				
				}
				memset((#type(t)*)_parent->data + _parent->size, 0, (newSize - _parent->size) * sizeof(#type(t)));
			}
			_parent->size = newSize;
		}

		*_return = _parent;
	
}c

array_setAt([stack]index'i32:, [heap]item'char:)'void c{

		#forceParent()
		#forceHeap(item)

		if (index >= _parent->size || index < 0) {
			printf("setAt: out of bounds %d:%d\n", index, _parent->size);
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
##if !#isValue(t)
		if (p[index] != 0) {
			#release(t, p[index]);
		}
##endif
		#retain(t, item);
		p[index] = item;
	
}c

string([stack]count'i32=, [stack]data'array_char=)'string {
  this
}

string_add([stack]item'string:)'string {
  if this.count > 0i {
    if .parentthis.count + this.count + 1i > this.size {
      [stack]array_grow([stack]this : array_grow(
        parent: [stack].parentthis.data,
        [stack]newSize'i32 : .parentthis.count + this.count + 1i
      ))
      void
    }
    for i : 0i to this.count {
      [stack]array_setAt([stack]this : array_setAt(
        parent: [stack].parentthis.data,
        [stack]index'i32 : .parentthis.count,
        [heap]item'char : [heap]string_getAt([stack]this : string_getAt(
          parent: [stack]this.item,
          [heap]index'i32 : i
        ))
      ))
      .parentthis.count++
    }
    [stack]array_setAt([stack]this : array_setAt(
      parent: [stack].parentthis.data,
      [stack]index'i32 : .parentthis.count,
      [heap]item'char : 0i as char
    ))
    void
  }
  this
}

string_getAt([heap]index'i32:)'char {
  [heap]array_getAt([stack]this : array_getAt(
    parent: [stack].parentthis.data,
    [heap]index'i32 : this.index
  ))
}

global()'void {
  [stack]convert'anon4 : [stack]anon4([stack]this : anon4())
  [stack]random'anon3 : [stack]anon3([stack]this : anon3())
  [stack]parse'anon2 : [stack]anon2([stack]this : anon2())
  [stack]console'anon1 : [stack]anon1([stack]this : anon1())
  [stack]a'string : [stack]string_add([stack]this : string_add(
    parent: [stack][stack]string([stack]this : string(
    parent: [stack]this,
    [stack]count'i32 = i,
    [stack]data'array_char = [stack]array!char([stack]this : array!char(
      [stack]size'i32 = i,
      [stack]data'ptr = ,
      [stack]_isGlobal'bool = false
    ))
  )),
    [stack]item'string : {
      [stack]string([stack]this : string(
        parent: [stack]this,
        [stack]count'i32 = i,
        [stack]data'array_char = [stack]array!char([stack]this : array!char(
          [stack]size'i32 = i,
          [stack]data'ptr = ,
          [stack]_isGlobal'bool = false
        ))
      ))
    }
  ))
  void
}


fancymath(x'i32=)'stack fancymath {
  this
}

fancymath_add(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_divide(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_dividei32(num'i32:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_getx()'i32 {
  parent.x
}

fancymath_increment()'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_modulus(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_multiply(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_setbob(i'i32:)'i32 {
  parent.x'i32 = i
}

fancymath_subtract(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

global()'void {
  a'stack fancymath : fancymath(this = fancymath(
    x'i32 = x
  ))
  b'stack fancymath : fancymath(this = fancymath(
    x'i32 = x
  ))
  ii'i32 : 2i
  c'stack fancymath = fancymath_add(
    parent: this,
    num'stack fancymath : num
  )
  d'stack fancymath = fancymath_subtract(
    parent: this,
    num'stack fancymath : num
  )
  e'stack fancymath = fancymath_multiply(
    parent: this,
    num'stack fancymath : num
  )
  f'stack fancymath = fancymath_divide(
    parent: this,
    num'stack fancymath : num
  )
  g'stack fancymath = fancymath_modulus(
    parent: this,
    num'stack fancymath : num
  )
  c'stack fancymath = fancymath_add(
    parent: this,
    num'stack fancymath : num
  )
  d'stack fancymath = fancymath_subtract(
    parent: this,
    num'stack fancymath : num
  )
  d'stack fancymath = fancymath_multiply(
    parent: this,
    num'stack fancymath : num
  )
  d'stack fancymath = fancymath_divide(
    parent: this,
    num'stack fancymath : num
  )
  e'stack fancymath = fancymath_increment(
    parent: this
  )
  f'stack fancymath = fancymath_increment(
    parent: this
  )
  i'i32 = fancymath_getx(
    parent: this
  )
  j'i32 = fancymath_setbob(
    parent: this,
    i'i32 : i
  )
  k'stack fancymath = fancymath_dividei32(
    parent: this,
    num'i32 : num
  )
  void
}


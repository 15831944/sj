fancymath(x'i32=)'stack fancymath {
  this
}

fancymath_add(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_divide(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_dividei32(num'i32:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_getx()'i32 {
  parent.x
}

fancymath_increment()'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_modulus(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_multiply(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

fancymath_setbob(i'i32:)'i32 {
  parent.x'i32 = i
}

fancymath_subtract(num'stack fancymath:)'stack fancymath {
  fancymath(this = fancymath(
    x'i32 = x
  ))
}

log(minlevel'loglevel=)'stack log {
  this
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  a'stack fancymath : fancymath(this = fancymath(
    x'i32 = x
  ))
  b'stack fancymath : fancymath(this = fancymath(
    x'i32 = x
  ))
  ii'i32 : 2i
  c'stack fancymath = fancymath_add(
    parent: this,
    num'stack fancymath : num
  )
  d'stack fancymath = fancymath_subtract(
    parent: this,
    num'stack fancymath : num
  )
  e'stack fancymath = fancymath_multiply(
    parent: this,
    num'stack fancymath : num
  )
  f'stack fancymath = fancymath_divide(
    parent: this,
    num'stack fancymath : num
  )
  g'stack fancymath = fancymath_modulus(
    parent: this,
    num'stack fancymath : num
  )
  c'stack fancymath = fancymath_add(
    parent: this,
    num'stack fancymath : num
  )
  d'stack fancymath = fancymath_subtract(
    parent: this,
    num'stack fancymath : num
  )
  d'stack fancymath = fancymath_multiply(
    parent: this,
    num'stack fancymath : num
  )
  d'stack fancymath = fancymath_divide(
    parent: this,
    num'stack fancymath : num
  )
  e'stack fancymath = fancymath_increment(
    parent: this
  )
  f'stack fancymath = fancymath_increment(
    parent: this
  )
  i'i32 = fancymath_getx(
    parent: this
  )
  j'i32 = fancymath_setbob(
    parent: this,
    i'i32 : i
  )
  k'stack fancymath = fancymath_dividei32(
    parent: this,
    num'i32 : num
  )
  void
}


fancyMath(x'i32=)'stack fancyMath {
  this
}

fancyMath_add(num'stack fancyMath:)'stack fancyMath {
  fancyMath(this = fancyMath(
    x'i32 = this.x
  ))
}

fancyMath_divide(num'stack fancyMath:)'stack fancyMath {
  fancyMath(this = fancyMath(
    x'i32 = this.x
  ))
}

fancyMath_getX()'i32 {
  parent.x
}

fancyMath_increment()'stack fancyMath {
  fancyMath(this = fancyMath(
    x'i32 = this.x
  ))
}

fancyMath_modulus(num'stack fancyMath:)'stack fancyMath {
  fancyMath(this = fancyMath(
    x'i32 = this.x
  ))
}

fancyMath_multiply(num'stack fancyMath:)'stack fancyMath {
  fancyMath(this = fancyMath(
    x'i32 = this.x
  ))
}

fancyMath_setBob(i'i32:)'i32 {
  parent.x'i32 = i
}

fancyMath_subtract(num'stack fancyMath:)'stack fancyMath {
  fancyMath(this = fancyMath(
    x'i32 = this.x
  ))
}

global()'void {
  a'stack fancyMath : fancyMath(this = fancyMath(
    x'i32 = this.x
  ))
  b'stack fancyMath : fancyMath(this = fancyMath(
    x'i32 = this.x
  ))
  c'stack fancyMath = fancyMath_add(
    parent: a,
    num'stack fancyMath : this.num
  )
  d'stack fancyMath = fancyMath_subtract(
    parent: a,
    num'stack fancyMath : this.num
  )
  e'stack fancyMath = fancyMath_multiply(
    parent: a,
    num'stack fancyMath : this.num
  )
  f'stack fancyMath = fancyMath_divide(
    parent: a,
    num'stack fancyMath : this.num
  )
  g'stack fancyMath = fancyMath_modulus(
    parent: a,
    num'stack fancyMath : this.num
  )
  c'stack fancyMath = fancyMath_add(
    parent: c,
    num'stack fancyMath : this.num
  )
  d'stack fancyMath = fancyMath_subtract(
    parent: d,
    num'stack fancyMath : this.num
  )
  d'stack fancyMath = fancyMath_multiply(
    parent: d,
    num'stack fancyMath : this.num
  )
  d'stack fancyMath = fancyMath_divide(
    parent: d,
    num'stack fancyMath : this.num
  )
  e'stack fancyMath = fancyMath_increment(
    parent: e
  )
  f'stack fancyMath = fancyMath_increment(
    parent: f
  )
  i'i32 = fancyMath_getX(
    parent: f
  )
  j'i32 = fancyMath_setBob(
    parent: this,
    i'i32 : this.i
  )
  void
}


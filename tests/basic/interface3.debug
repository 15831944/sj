anon1()'anon1 {
  this
}

anon2()'anon2 {
  this
}

anon3()'anon3 {
  this
}

anon4()'anon4 {
  this
}

array!char([heap]size'i32=, [heap]data'ptr=, [heap]_isGlobal'bool=)'array_char {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)calloc(_this->size * sizeof(#type(t)), 1);
			if (!_this->data) {
				printf("grow: out of memory\n");
				exit(-1);				
			}
		}
	
}c
  this
}

class ##foo ()'class {
  this
}

class_test()'string {
  {
    [heap]string([heap]this : string(
      [heap]count'i32 = i,
      [heap]data'array_char = [heap]array!char([heap]this : array!char(
        [heap]size'i32 = i,
        [heap]data'ptr = ,
        [heap]_isGlobal'bool = false
      ))
    ))
  }
}

string([heap]count'i32=, [heap]data'array_char=)'string {
  this
}

test()

global()'void {
  [stack]convert'anon4 : [stack]anon4([stack]this : anon4())
  [stack]random'anon3 : [stack]anon3([stack]this : anon3())
  [stack]parse'anon2 : [stack]anon2([stack]this : anon2())
  [stack]console'anon1 : [stack]anon1([stack]this : anon1())
  #foo(
    test()'string
  )
  [heap]a'#foo : [stack]class([stack]this : class()) as #foo
  [heap]test(
    parent: [heap]a
  )
  void
}


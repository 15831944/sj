bar_asstring(e'bar:)'stack string switch e {
   == 0i string(this = string(
      count'i32 = count,
      data'stack array!char = data
    ))
   == 1i string(this = string(
      count'i32 = count,
      data'stack array!char = data
    ))
   == 2i string(this = string(
      count'i32 = count,
      data'stack array!char = data
    ))
  default string(this = string(
      count'i32 = count,
      data'stack array!char = data
    ))
}

func()'bar? {
  value(a)
}

log(minlevel'loglevel=)'stack log {
  this
}

string(count'i32=, data'stack array!char=)'stack string {
  this
}

writeline(data'stack string:)'void {
  --c--
  debugout("%s\n", (char*)data->data.data);
  --c--
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  {
    a'bar : 0
    b'bar : 1
    c'bar : 2
  }
  {
    a'bar2 : 0
    b'bar2 : 1
    c'bar2 : 2
  }
  b'bar? : func()
  c'stack string? : if isValid(b) value(bar_asstring(
    e'bar : e
  )) else empty'stack string?
  writeline(
    data'stack string : data
  )
  void
}


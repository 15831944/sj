class(x'i32:)'stack class {
  this
}

func(c'stack class?:)'i32 {
  if isValid(if isValid(c) value(getValue(c).x) else empty'i32?) getValue(if isValid(c) value(getValue(c).x) else empty'i32?) else 0i
}

log(minlevel'loglevel=)'stack log {
  this
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  clocks_per_sec'i32 = 0i
  --c--
  sjv_clocks_per_sec = CLOCKS_PER_SEC;
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  c'stack class? : value(class(this = class(
    x'i32 : x
  )))
  d'i32 : if isValid(if isValid(c) value(getValue(c).x) else empty'i32?) getValue(if isValid(c) value(getValue(c).x) else empty'i32?) else 0i
  e'stack class : if isValid(if isValid(c) value(copy getValue(c)) else empty'stack class?) getValue(if isValid(c) value(copy getValue(c)) else empty'stack class?) else class(this = class(
    x'i32 : x
  ))
  func(
    c'stack class? : c
  )
  void
}


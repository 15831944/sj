array_getAt(index'i32:)'stack class c{

		int32_t size;
		#retain(i32, size, size);
		uintptr_t data;
		#retain(ptr, data, data);

		if (index >= size || index < 0) {
			printf("getAt: out of bounds\n");
			exit(-1);
		}

		#type(t)* p = (#type(t)*)data;
		#return(t, p[index]);		
	
}c

array_initAt(index'i32:, item'stack class:)'void c{

		int32_t size;
		#retain(i32, size, size);
		uintptr_t data;
		#retain(ptr, data, data);

		if (index >= size || index < 0) {
			printf("setAt: out of bounds %d:%d\n", index, size);
			exit(-1);
		}

		#type(t)* p = (#type(t)*)data;
		#retain(t, p[index], item);
	
}c

global()'void {
  a'stack array_class : [array_initAt(
    parent: this,
    index'i32 : this.index,
    item'stack class : this.item
  ), array_initAt(
    parent: this,
    index'i32 : this.index,
    item'stack class : this.item
  ), array_initAt(
    parent: this,
    index'i32 : this.index,
    item'stack class : this.item
  )]
  c'local class : local array_getAt(
    parent: a,
    index'i32 : this.index
  )
  this.x
  void
}


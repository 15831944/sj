array!i32([stack]size'i32=, [stack]data'ptr=, [stack]_isGlobal'bool=)'array_i32 {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)calloc(_this->size * sizeof(#type(t)), 1);
			if (!_this->data) {
				printf("grow: out of memory\n");
				exit(-1);				
			}
		}
	
}c
  this
}

array_getAt([stack]index'i32:)'i32 c{

		#forceParent()

		if (index >= _parent->size || index < 0) {
			printf("getAt: out of bounds\n");
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
		#type(t) val = p[index];
##if !#isValue(t)
		if (val == 0) {
			printf("getAt: value is not defined at %d\n", index);
			exit(-1);
		}
##endif
		*_return = val;		
	
}c

array_setAt([stack]index'i32:, [heap]item'i32:)'void c{

		#forceParent()
		#forceHeap(item)

		if (index >= _parent->size || index < 0) {
			printf("setAt: out of bounds %d:%d\n", index, _parent->size);
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
##if !#isValue(t)
		if (p[index] != 0) {
			#release(t, p[index]);
		}
##endif
		#retain(t, item);
		p[index] = item;
	
}c

global()'void {
  [stack]a'array_i32 : {
    [stack]sjv_array1'array_i32 : [stack]array!i32([stack]this : array!i32(
      [stack]size'i32 = i,
      [stack]data'ptr = 0i as ptr,
      [stack]_isGlobal'bool = false
    ))
    [stack]array_setAt([stack]this : array_setAt(
      parent: [stack]sjv_array1,
      [stack]index'i32 : i,
      [heap]item'i32 : 1i
    ))
    [stack]array_setAt([stack]this : array_setAt(
      parent: [stack]sjv_array1,
      [stack]index'i32 : i,
      [heap]item'i32 : 2i
    ))
    [stack]array_setAt([stack]this : array_setAt(
      parent: [stack]sjv_array1,
      [stack]index'i32 : i,
      [heap]item'i32 : 3i
    ))
    sjv_array1
  }
  [stack]array_getAt([stack]this : array_getAt(
    parent: [stack]a,
    [stack]index'i32 : 0i
  ))
  void
}


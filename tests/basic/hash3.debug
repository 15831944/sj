hash![stack string, heap #interface]()'stack hash![string, #interface] {
  --cdefine--
  #ifndef string_heap_iface_interface_hash_typedef
  #define string_heap_iface_interface_hash_typedef
  KHASH_INIT_TYPEDEF(string_heap_iface_interface_hash_type, sjs_string, sji_interface)
  #endif
  --cdefine--
  --cfunction--
  #ifndef string_heap_iface_interface_hash_function
  #define string_heap_iface_interface_hash_function
  #if true
  KHASH_INIT_FUNCTION_DEREF(string_heap_iface_interface_hash_type, sjs_string, sji_interface, 1, INVALID, INVALID)
  #else
  KHASH_INIT_FUNCTION(string_heap_iface_interface_hash_type, sjs_string, sji_interface, 1, INVALID, INVALID)
  #endif
  #endif
  --cfunction--
  --c--
  _this->_hash = kh_init(string_heap_iface_interface_hash_type);
  --c--
  this
}

hash_getat(key'stack string:)'heap #interface? {
  --c--
  khash_t(string_heap_iface_interface_hash_type)* p = (khash_t(string_heap_iface_interface_hash_type)*)_parent->_hash;
  #if true
  khiter_t k = kh_get(string_heap_iface_interface_hash_type, p, *key);
  #else
  khiter_t k = kh_get(string_heap_iface_interface_hash_type, p, key);
  #endif
  if (k == kh_end(p)) {
  return;
  }
  return;;
  --c--
}

hash_setat(key'stack string:, val'heap #interface:)'void {
  --c--
  khash_t(string_heap_iface_interface_hash_type)* p = (khash_t(string_heap_iface_interface_hash_type)*)_parent->_hash;
  #if true
  khiter_t k = kh_get(string_heap_iface_interface_hash_type, p, *key);
  #else
  khiter_t k = kh_get(string_heap_iface_interface_hash_type, p, key);
  #endif
  if (k != kh_end(p)) {            
  if (kh_val(p, k)._parent != 0) {
    kh_val(p, k)._parent->_refCount--;
    if (kh_val(p, k)._parent->_refCount <= 0) {
        kh_val(p, k)._vtbl->destroy(kh_val(p, k)._parent);
        free(kh_val(p, k)._parent);
    }
}
;
  }
  int ret;
  #if true
  k = kh_put(string_heap_iface_interface_hash_type, _parent->_hash, *key, &ret);
  #else
  k = kh_put(string_heap_iface_interface_hash_type, _parent->_hash, key, &ret);
  #endif
  if (!ret) kh_del(string_heap_iface_interface_hash_type, p, k);
  #if false
  delete_cb cb = { _parent, (void(*)(void*, void*))INVALID };
  weakptr_cb_add(key, cb);
  #else
  sjs_string t;
  ;
  #endif
  #if false
  delete_cb cb = { _parent, (void(*)(void*, void*))INVALID };
  weakptr_cb_add(val._parent, cb);
  kh_val(p, k) = val;
  #else
  ;
  #endif
  --c--
}

log(minlevel'loglevel=)'stack log {
  this
}

writeline(data'stack string:)'void {
  --c--
  debugout("%s\n", (char*)data->data.data);
  --c--
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  a'stack hash![string, #interface] : hash![stack string, heap #interface](this = hash![stack string, heap #interface]())
  hash_setat(
    parent: this,
    key'stack string : key,
    val'heap #interface : val
  )
  b'heap #interface? : hash_getat(
    parent: this,
    key'stack string : key
  )
  writeline(
    data'stack string : data
  )
  void
}


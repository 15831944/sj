array!class([stack]size'i32=, [stack]data'ptr=, [stack]_isGlobal'bool=)'array_class {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)malloc(_this->size * sizeof(#type(t)));
		}
	
}c
  this
}

array_setAt([stack]index'i32:, [heap]item'class:)'void c{

		#forceParent()
		#forceHeap(item)

		if (index >= _parent->size || index < 0) {
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
		#release(t, p[index]);
		#retain(t, item);
		p[index] = item;
	
}c

class([heap]bob'i32:)'class {
  this
}

global()'void {
  [stack]a'array_class : [stack]array!class([stack]this : array!class(
    [stack]size'i32 = 2i,
    [stack]data'ptr = 0i as ptr,
    [stack]_isGlobal'bool = false
  ))
  [stack]array_setAt([stack]this : array_setAt(
    parent: [stack]a,
    [stack]index'i32 : 0i,
    [heap]item'class : [heap]class([heap]this : class(
      [heap]bob'i32 : 1i
    ))
  ))
  void
}


array!heap class(size'i32=, data'ptr=, _isGlobal'bool=)'heap array_heap_class {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)calloc(_this->size * sizeof(sjs_class_heap*), 1);
			if (!_this->data) {
				printf("grow: out of memory\n");
				exit(-1);				
			}
		}
	
}c
  this
}

array_getAt(index'i32:)'heap class c{

		

		if (index >= _parent->size || index < 0) {
			printf("getAt: out of bounds\n");
			exit(-1);
		}

		sjs_class_heap** p = (sjs_class_heap**)_parent->data;
		sjs_class_heap* val = p[index];
#if !false
		if (val == 0) {
			printf("getAt: value is not defined at %d\n", index);
			exit(-1);
		}
#endif
		*_return = val;		
	
}c

array_initAt(index'i32:, item'heap class:)'void c{

		

		if (index >= _parent->size || index < 0) {
			printf("setAt: out of bounds %d:%d\n", index, _parent->size);
			exit(-1);
		}

		sjs_class_heap** p = (sjs_class_heap**)_parent->data;
		 item->_refCount++;
;
		p[index] = item;
	
}c

global()'void {
  a'heap array_heap_class : heap {
    sjv_array1'heap array_heap_class : array!heap class(this = array!heap class(
      size'i32 = this.size,
      data'ptr = this.data,
      _isGlobal'bool = this._isGlobal
    ))
    array_initAt(
      parent: sjv_array1,
      index'i32 : this.index,
      item'heap class : this.item
    )
    array_initAt(
      parent: sjv_array1,
      index'i32 : this.index,
      item'heap class : this.item
    )
    array_initAt(
      parent: sjv_array1,
      index'i32 : this.index,
      item'heap class : this.item
    )
    sjv_array1
  }
  c'heap class : array_getAt(
    parent: a,
    index'i32 : this.index
  )
  this.x
  void
}


anon1([stack]_fd'ptr=)'anon1 {
  c{
 
		#include(<stdio.h>)
		_this->_fd = (uintptr_t)stdout;
	
}c
  this
}

anon2()'anon2 {
  this
}

anon3()'anon3 {
  this
}

array!char([heap]size'i32=, [heap]data'ptr=, [heap]_isGlobal'bool=)'array_char {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)malloc(_this->size * sizeof(#type(t)));
		}
	
}c
  this
}

array_getAt([heap]index'i32:)'char c{

		#forceParent()

		if (index >= _parent->size || index < 0) {
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
		#type(t) val = p[index];
		if (!#isValue(t)) {
			if (val == 0) {
				exit(-1);
			}
		}
		*_return = val;		
	
}c

array_isEqual([heap]test'array_char:)'bool c{

		#forceParent()
		#include(<string.h>)

		if (_parent->size != test->size) {
			*_return = false;
		}

		*_return = memcmp((void*)_parent->data, (void*)test->data, _parent->size * sizeof(#type(t))) == 0;		
	
}c

array_isLessOrEqual([heap]test'array_char:)'bool c{

		#forceParent()
		#include(<string.h>)

		*_return = memcmp((void*)_parent->data, (void*)test->data, (_parent->size < test->size ? _parent->size : test->size) * sizeof(#type(t))) <= 0;		
	
}c

string([stack]count'i32=, [heap]data'array_char=)'string {
  this
}

string_getAt([heap]index'i32:)'char {
  [heap]array_getAt([stack]this : array_getAt(
    parent: [heap].parentthis.data,
    [heap]index'i32 : this.index
  ))
}

string_isEqual([stack]test'string:)'bool {
  [heap]array_isEqual([stack]this : array_isEqual(
    parent: [heap].parentthis.data,
    [heap]test'array_char : this.data
  ))
}

string_isLessOrEqual([stack]test'string:)'bool {
  [heap]array_isLessOrEqual([stack]this : array_isLessOrEqual(
    parent: [heap].parentthis.data,
    [heap]test'array_char : this.data
  ))
}

global()'void {
  [stack]random'anon3 : [stack]anon3([stack]this : anon3())
  [stack]parse'anon2 : [stack]anon2([stack]this : anon2())
  [stack]console'anon1 : [stack]anon1([stack]this : anon1(
    [stack]_fd'ptr = 0 as ptr
  ))
  [stack]a'string : {
    [stack]string([stack]this : string(
      parent: [stack]this,
      [stack]count'i32 = ,
      [heap]data'array_char = [heap]array!char([heap]this : array!char(
        [heap]size'i32 = ,
        [heap]data'ptr = ,
        [heap]_isGlobal'bool = false
      ))
    ))
  }
  [stack]b'string : {
    [stack]string([stack]this : string(
      parent: [stack]this,
      [stack]count'i32 = ,
      [heap]data'array_char = [heap]array!char([heap]this : array!char(
        [heap]size'i32 = ,
        [heap]data'ptr = ,
        [heap]_isGlobal'bool = false
      ))
    ))
  }
  [stack]c'char : 'a'
  [stack]d'char : '\''
  [stack]e'char : '\n'
  [stack]f'string : {
    [stack]string([stack]this : string(
      parent: [stack]this,
      [stack]count'i32 = ,
      [heap]data'array_char = [heap]array!char([heap]this : array!char(
        [heap]size'i32 = ,
        [heap]data'ptr = ,
        [heap]_isGlobal'bool = false
      ))
    ))
  }
  [heap]h'char : [heap]string_getAt([stack]this : string_getAt(
    parent: [stack]a,
    [heap]index'i32 : 0
  ))
  [stack]i'bool : h == 'h'
  [heap]j'bool : [heap]string_isEqual([stack]this : string_isEqual(
    parent: [stack]f,
    [stack]test'string : a
  ))
  [heap]k'bool : [heap]string_isLessOrEqual([stack]this : string_isLessOrEqual(
    parent: [stack]f,
    [stack]test'string : a
  ))
  [stack]l'bool : fa
  void
}


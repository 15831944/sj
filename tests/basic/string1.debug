anon1()'stack anon1 {
  this
}

anon2()'stack anon2 {
  this
}

anon3()'stack anon3 {
  this
}

anon4()'stack anon4 {
  this
}

array_getAt(index'i32:)'char c{

		if (index >= _parent->size || index < 0) {
			printf("getAt: out of bounds\n");
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
		#return(t, p[index]);		
	
}c

array_isEqual(test'stack array_char:)'bool c{

		if (_parent->size != test->size) {
			*_return = false;
		}

		*_return = memcmp((void*)_parent->data, (void*)test->data, _parent->size * sizeof(#type(t))) == 0;		
	
}c

array_isLessOrEqual(test'stack array_char:)'bool c{

		*_return = memcmp((void*)_parent->data, (void*)test->data, (_parent->size < test->size ? _parent->size : test->size) * sizeof(#type(t))) <= 0;		
	
}c

string(count'i32=, data'stack array_char=)'stack string {
  this
}

string_getAt(index'i32:)'char {
  array_getAt(
    parent: parent.data,
    index'i32 : this.index
  )
}

string_isEqual(test'stack string:)'bool {
  array_isEqual(
    parent: parent.data,
    test'stack array_char : this.test
  )
}

string_isLessOrEqual(test'stack string:)'bool {
  array_isLessOrEqual(
    parent: parent.data,
    test'stack array_char : this.test
  )
}

global()'void {
  convert'stack anon4 : anon4(this = anon4())
  random'stack anon3 : anon3(this = anon3())
  parse'stack anon2 : anon2(this = anon2())
  console'stack anon1 : anon1(this = anon1())
  a'stack string : string(this = string(
    count'i32 = this.count,
    data'stack array_char = this.data
  ))
  b'stack string : string(this = string(
    count'i32 = this.count,
    data'stack array_char = this.data
  ))
  c'char : 'a'
  d'char : '\''
  e'char : '\n'
  f'stack string : string(this = string(
    count'i32 = this.count,
    data'stack array_char = this.data
  ))
  h'char : string_getAt(
    parent: a,
    index'i32 : this.index
  )
  i'bool : h == 'h'
  j'bool : string_isEqual(
    parent: f,
    test'stack string : this.test
  )
  k'bool : string_isLessOrEqual(
    parent: f,
    test'stack string : this.test
  )
  l'bool : f === a
  void
}


array_getat(index'i32:)'char {
  --c--
  if (index >= _parent->count || index < 0) {
  halt("getAt: out of bounds\n");
  }
  char* p = (char*)_parent->data;
  return;;       
  --c--
}

array_isequal(test'stack array!char:)'bool {
  --c--
  if (_parent->count != test->count) {
  *_return = false;
  }
  bool result = memcmp(_parent->data, test->data, _parent->count * sizeof(char)) == 0;
  return;;      
  --c--
}

array_islessorequal(test'stack array!char:)'bool {
  --c--
  bool result = memcmp(_parent->data, test->data, (_parent->count < test->count ? _parent->count : test->count) * sizeof(char)) <= 0;     
  return;;      
  --c--
}

log(minlevel'loglevel=)'stack log {
  this
}

string(count'i32=, data'stack array!char=, _isnullterminated'bool=)'stack string {
  this
}

string_getat(index'i32:)'char {
  array_getat(
    parent: this,
    index'i32 : index
  )
}

string_isequal(test'stack string:)'bool {
  array_isequal(
    parent: this,
    test'stack array!char : test
  )
}

string_islessorequal(test'stack string:)'bool {
  array_islessorequal(
    parent: this,
    test'stack array!char : test
  )
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  clocks_per_sec'i32 = 0i
  --c--
  sjv_clocks_per_sec = CLOCKS_PER_SEC;
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  a'stack string : string(this = string(
    count'i32 = count,
    data'stack array!char = data,
    _isnullterminated'bool = _isnullterminated
  ))
  b'stack string : string(this = string(
    count'i32 = count,
    data'stack array!char = data,
    _isnullterminated'bool = _isnullterminated
  ))
  c'char : 'a'
  d'char : '\''
  e'char : '\n'
  f'stack string : string(this = string(
    count'i32 = count,
    data'stack array!char = data,
    _isnullterminated'bool = _isnullterminated
  ))
  h'char : string_getat(
    parent: this,
    index'i32 : index
  )
  i'bool : h == 'h'
  j'bool : string_isequal(
    parent: this,
    test'stack string : test
  )
  k'bool : string_islessorequal(
    parent: this,
    test'stack string : test
  )
  l'bool : f === a
  void
}


array!i32(datasize'i32:, data'ptr:, _isglobal'bool:, count'i32:)'stack array!i32 {
  --c--
  if (_this->datasize < 0) {
  halt("size is less than zero");
  }
  if (!_this->data) {
  _this->data = malloc(_this->datasize * sizeof(int32_t));
  if (!_this->data) {
  halt("grow: out of memory\n");
  }
  }
  --c--
  this
}

array_getat(index'i32:)'i32 {
  --c--
  if (index >= _parent->count || index < 0) {
  halt("getAt: out of bounds\n");
  }
  int32_t* p = (int32_t*)_parent->data;
  return;;       
  --c--
}

array_setat(index'i32:, item'i32:)'void {
  --c--
  if (index >= _parent->count || index < 0) {
  halt("setAt: out of bounds %d:%d\n", index, _parent->count);
  }
  int32_t* p = (int32_t*)_parent->data;
  ;
  ;
  --c--
}

log(minlevel'loglevel=)'stack log {
  this
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  a'stack array!i32 : array!i32(this = array!i32(
    datasize'i32 : datasize,
    data'ptr : data,
    _isglobal'bool : _isglobal,
    count'i32 : count
  ))
  array_setat(
    parent: this,
    index'i32 : index,
    item'i32 : item
  )
  c'i32 : array_getat(
    parent: this,
    index'i32 : index
  )
  c
  void
}


class(x'i32:)'heap class {
  this
}

class_asstring(x'stack class:)'i32 {
  2i
}

i32_asstring(val'i32:)'stack string {
  count'i32 = 0i
  data'ptr = 0
  --c--
  sjv_data = malloc(sizeof(char) * 50);
  snprintf((char*)sjv_data, 50, "%d", val);
  sjv_count = strlen((char*)sjv_data);
  --c--
  string(this = string(
    count'i32 = count,
    data'stack array!char = data
  ))
}

log(minlevel'loglevel=)'stack log {
  this
}

string(count'i32=, data'stack array!char=)'stack string {
  this
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  i32_asstring(
    val'i32 : val
  )
  c'heap class : heap class(this = class(
    x'i32 : x
  ))
  class_asstring(
    x'stack class : x
  )
  void
}


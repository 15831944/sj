class(x'i32:)'heap class {
  this
}

class_asstring(x'stack class:)'i32 {
  2i
}

i32_asstring(val'i32:, base'i32:)'stack string {
  count'i32 = 0i
  data'ptr = 0
  --c--
  sjv_data = (int*)malloc(sizeof(int) + sizeof(char) * 256) + 1;
  int* refcount = (int*)sjv_data - 1;
  *refcount = 1;
  char *tmp = (char*)sjv_data + 128;
  char *tp = (char*)sjv_data + 128;
  int i;
  unsigned v;
  int sign = (base == 10 && val < 0);    
  if (sign)
  v = -val;
  else
  v = (unsigned)val;
  while (v || tp == tmp)
  {
  i = v % base;
  v /= base; // v/=base uses less CPU clocks than v=v/base does
  if (i < 10)
  *tp++ = i + '0';
  else
  *tp++ = i + 'a' - 10;
  }
  int len = tp - tmp;
  char* sp = (char*)sjv_data;
  if (sign) 
  {
  *sp++ = '-';
  len++;
  }
  while (tp > tmp)
  *sp++ = *--tp;
  sjv_count = len;
  --c--
  string(this = string(
    count'i32 = count,
    data'stack array!char = data,
    _isnullterminated'bool = _isnullterminated
  ))
}

log(minlevel'loglevel=)'stack log {
  this
}

string(count'i32=, data'stack array!char=, _isnullterminated'bool=)'stack string {
  this
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  clocks_per_sec'i32 = 0i
  --c--
  sjv_clocks_per_sec = CLOCKS_PER_SEC;
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  i32_asstring(
    val'i32 : val,
    base'i32 : base
  )
  c'heap class : heap class(this = class(
    x'i32 : x
  ))
  class_asstring(
    x'stack class : x
  )
  void
}


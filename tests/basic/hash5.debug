class(x'i32:)'heap class {
  this
}

hash![i32, weak class]()'stack hash![i32, class?] {
  --cdefine--
  #ifndef i32_weak_class_hash_typedef
  #define i32_weak_class_hash_typedef
  KHASH_INIT_TYPEDEF(i32_weak_class_hash_type, int32_t, sjs_class*)
  #endif
  --cdefine--
  --cfunction--
  #ifndef i32_weak_class_hash_function
  #define i32_weak_class_hash_function
  #if false
  KHASH_INIT_FUNCTION_DEREF(i32_weak_class_hash_type, int32_t, sjs_class*, 1, INVALID, INVALID)
  #else
  KHASH_INIT_FUNCTION(i32_weak_class_hash_type, int32_t, sjs_class*, 1, INVALID, INVALID)
  #endif
  #endif
  --cfunction--
  --c--
  _this->_hash = kh_init(i32_weak_class_hash_type);
  --c--
  this
}

hash_setat(key'i32:, val'weak class:)'void {
  --c--
  khash_t(i32_weak_class_hash_type)* p = (khash_t(i32_weak_class_hash_type)*)_parent->_hash;
  #if false
  khiter_t k = kh_get(i32_weak_class_hash_type, p, *key);
  #else
  khiter_t k = kh_get(i32_weak_class_hash_type, p, key);
  #endif
  if (k != kh_end(p)) {            
  delete_cb weakptrcb5 = { &kh_val(p, k), weakptr_clear };
if (kh_val(p, k) != 0) { weakptr_cb_remove(kh_val(p, k), weakptrcb5); }
;
  }
  int ret;
  #if false
  k = kh_put(i32_weak_class_hash_type, _parent->_hash, *key, &ret);
  #else
  k = kh_put(i32_weak_class_hash_type, _parent->_hash, key, &ret);
  #endif
  if (!ret) kh_del(i32_weak_class_hash_type, p, k);
  #if false
  delete_cb cb = { _parent, (void(*)(void*, void*))INVALID };
  weakptr_cb_add(key, cb);
  #else
  int32_t t;
  ;
  #endif
  #if true
  delete_cb cb = { _parent, (void(*)(void*, void*))INVALID };
  weakptr_cb_add(val, cb);
  kh_val(p, k) = val;
  #else
  ;
  #endif
  --c--
}

log(minlevel'loglevel=)'stack log {
  this
}

writeline(data'stack string:)'void {
  --c--
  debugout("%s\n", (char*)data->data.data);
  --c--
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  a'stack hash![i32, class?] : hash![i32, weak class](this = hash![i32, weak class]())
  c'heap class = heap class(this = class(
    x'i32 : x
  ))
  hash_setat(
    parent: this,
    key'i32 : key,
    val'weak class : val
  )
  writeline(
    data'stack string : data
  )
  c'heap class = heap class(this = class(
    x'i32 : x
  ))
  writeline(
    data'stack string : data
  )
  void
}


array_initat(index'i32:, item'weak class:)'void {
  --c--
  if (index != _parent->count) {
  halt("initAt: can only initialize last element\n");     
  }
  if (index >= _parent->datasize || index < 0) {
  halt("initAt: out of bounds %d:%d\n", index, _parent->datasize);
  }
  sjs_class** p = (sjs_class**)_parent->data;
  ;
  _parent->count = index + 1;
  --c--
}

class(x'i32:)'heap class {
  this
}

log(minlevel'loglevel=)'stack log {
  this
}

writeline(data'stack string:)'void {
  --c--
  debugout("%s\n", (char*)data->data.data);
  --c--
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  c'heap class = heap class(this = class(
    x'i32 : x
  ))
  d'heap class = heap class(this = class(
    x'i32 : x
  ))
  a'stack array!class? : [array_initat(
    parent: this,
    index'i32 : index,
    item'weak class : item
  ), array_initat(
    parent: this,
    index'i32 : index,
    item'weak class : item
  )]
  writeline(
    data'stack string : data
  )
  c'heap class = heap class(this = class(
    x'i32 : x
  ))
  writeline(
    data'stack string : data
  )
  d'heap class = heap class(this = class(
    x'i32 : x
  ))
  writeline(
    data'stack string : data
  )
  void
}


anon1()'stack anon1 {
  this
}

anon2()'stack anon2 {
  this
}

anon3()'stack anon3 {
  this
}

anon4()'stack anon4 {
  this
}

func()'stack tuple2_i32_string {
  tuple2![i32, stack string](this = tuple2![i32, stack string](
    item1'i32 : this.item1,
    item2'stack string : this.item2
  ))
}

tuple2![i32, stack string](item1'i32:, item2'stack string:)'stack tuple2_i32_string {
  this
}

tuple3![stack string, f64, i32](item1'stack string:, item2'f64:, item3'i32:)'stack tuple3_string_f64_i32 {
  this
}

global()'void {
  convert'stack anon4 : anon4(this = anon4())
  random'stack anon3 : anon3(this = anon3())
  parse'stack anon2 : anon2(this = anon2())
  console'stack anon1 : anon1(this = anon1())
  t'stack tuple2_i32_string : func()
  a'i32 = this.item1
  b'stack string = this.item2
  {
    tupleResult1'stack tuple2_i32_string : func()
    a'i32 = this.item1
    b'stack string = this.item2
  }
  {
    tupleResult2'stack tuple2_i32_string : func()
    c'i32 : this.item1
    d'stack string : this.item2
  }
  {
    tupleResult3'stack tuple3_string_f64_i32 : tuple3![stack string, f64, i32](this = tuple3![stack string, f64, i32](
      item1'stack string : this.item1,
      item2'f64 : this.item2,
      item3'i32 : this.item3
    ))
    e'stack string : this.item1
    f'f64 : this.item2
  }
  void
}


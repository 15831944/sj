

callback(f'local (:i32)stack data:)'i32 {
  d'stack data : f(
    param0'i32 : param0
  )
  d.x
}

class(b'i32:)'heap class {
  this
}









getcallback()'heap (:i32)stack data {
  c'heap class : heap class(this = class(
    b'i32 : b
  ))
}

hash![type, bool]()'stack hash![type, bool] {
  --cdefine--
  #ifndef type_bool_hash_typedef
  #define type_bool_hash_typedef
  KHASH_INIT_TYPEDEF(type_bool_hash_type, int32_t, bool)
  #endif
  --cdefine--
  --cfunction--
  #ifndef type_bool_hash_function
  #define type_bool_hash_function
  #if false
  KHASH_INIT_FUNCTION_DEREF(type_bool_hash_type, int32_t, bool, 1, INVALID, INVALID)
  #else
  KHASH_INIT_FUNCTION(type_bool_hash_type, int32_t, bool, 1, INVALID, INVALID)
  #endif
  #endif
  --cfunction--
  --c--
  _this->_hash = kh_init(type_bool_hash_type);
  --c--
  this
}









log(minlevel'loglevel=, traceincludes'stack hash![type, bool]?=, debugincludes'stack hash![type, bool]?=, infoincludes'stack hash![type, bool]?=, warnincludes'stack hash![type, bool]?=, errorincludes'stack hash![type, bool]?=, fatalincludes'stack hash![type, bool]?=)'stack log {
  this
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log_includeall'stack hash![type, bool]? : empty'stack hash![type, bool]?
  log_excludeall'stack hash![type, bool]? : value(hash![type, bool](this = hash![type, bool]()))
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel,
    traceincludes'stack hash![type, bool]? = traceincludes,
    debugincludes'stack hash![type, bool]? = debugincludes,
    infoincludes'stack hash![type, bool]? = infoincludes,
    warnincludes'stack hash![type, bool]? = warnincludes,
    errorincludes'stack hash![type, bool]? = errorincludes,
    fatalincludes'stack hash![type, bool]? = fatalincludes
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  clocks_per_sec'i32 = 0i
  --c--
  sjv_clocks_per_sec = CLOCKS_PER_SEC;
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  a'local (:i32)stack data : 
  b'heap data : heap a(
    param0'i32 : param0
  )
  l'heap (:i32)stack data : getcallback()
  m'stack data : l(
    param0'i32 : param0
  )
  n'heap data : heap l(
    param0'i32 : param0
  )
  c'stack class : class(this = class(
    b'i32 : b
  ))
  a2'i32 : callback(
    f'local (:i32)stack data : f
  )
  b2'i32 : callback(
    f'local (:i32)stack data : f
  )
  f1'local (:i32)stack data : 
  d'stack data : f1(
    param0'i32 : param0
  )
  f2'local (:i32)stack data : 
  e'stack data : f2(
    param0'i32 : param0
  )
  c_heap'heap class : heap class(this = class(
    b'i32 : b
  ))
  f3'heap (:i32)stack data : 
  g'stack data : f3(
    param0'i32 : param0
  )
  h'local (:i32)stack data? : empty'local (:i32)stack data?
  i'local (:i32)stack data? : value()
  j'local (:i32)stack data : getValue(i)
  k'stack data : j(
    param0'i32 : param0
  )
  o'local (:i32)stack data : 
  p'stack data : l(
    param0'i32 : param0
  )
  void
}


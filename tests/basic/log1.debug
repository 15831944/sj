log(minlevel'loglevel=)'stack log {
  this
}

log__write(level'loglevel:, cb'local ()stack string:)'void {
  writeline(
    data'stack string : data
  )
}

log_info(cb'local ()stack string:)'void {
  if info >= parent.minlevel {
    log__write(
      parent: this,
      level'loglevel : level,
      cb'local ()stack string : cb
    )
  }
}

writeline(data'stack string:)'void {
  --c--
  debugout("%s\n", (char*)data->data.data);
  --c--
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  log.minlevel'loglevel = info
  log_info(
    parent: this,
    cb'local ()stack string : cb
  )
  void
}


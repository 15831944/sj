array!class([stack]size'i32=, [stack]data'ptr=, [stack]_isGlobal'bool=) {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)malloc(_this->size * sizeof(#type(t)));
		}
	
}c
  this
}

array_getAt([heap]index'i32:) c{

		#forceParent()

		if (index >= _parent->size || index < 0) {
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
		#type(t) val = p[index];
		if (!#isValue(t)) {
			if (val == 0) {
				exit(-1);
			}
		}
		return val;		
	
}c

array_grow([heap]newSize'i32:) c{

		#forceParent()

		if (_parent->size != newSize) {
			if (newSize < _parent->size) {
				exit(-1);
			}
			
			if (_parent->_isGlobal) {
				_parent->_isGlobal = false;
				#type(t)* p = (#type(t)*)_parent->data;
				_parent->data = (uintptr_t)malloc(newSize * sizeof(#type(t)));
				memcpy((void*)_parent->data, p, _parent->size * sizeof(#type(t)));
			} else {
				_parent->data = (uintptr_t)realloc((void*)_parent->data, newSize * sizeof(#type(t)));
			}
			_parent->size = newSize;
		}

		return _parent;
	
}c

array_setAt([stack]index'i32:, [heap]item'class:) c{

		#forceParent()
		#forceHeap(item)

		if (index >= _parent->size || index < 0) {
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
		#release(t, p[index]);
		#retain(t, item);
		p[index] = item;
	
}c

class([heap]x'i32:) {
  this
}

list!class([stack]count'i32=, [stack]data'array_class=) {
  this
}

list_add([heap]item'class:) {
  if .parentthis.count > this.size {
    [heap]list_setSize([stack]this : list_setSize(
      parent: [stack]this,
      [heap]size'i32 : this.size * 2
    ))
    void
  }
  array_setAt([stack]this : array_setAt(
    parent: [stack].parentthis.data,
    [stack]index'i32 : .parentthis.count,
    [heap]item'class : this.item
  ))
  .parentthis.count++
}

list_getAt([heap]index'i32:) {
  array_getAt([stack]this : array_getAt(
    parent: [stack].parentthis.data,
    [heap]index'i32 : this.index
  ))
}

list_setSize([heap]size'i32:) {
  array_grow([stack]this : array_grow(
    parent: [stack].parentthis.data,
    [heap]newSize'i32 : this.size
  ))
}

global {
  [stack]a'list_class : [stack]list!class([stack]this : list!class(
    parent: [stack]this,
    [stack]count'i32 = 0,
    [stack]data'array_class = [stack]array!class([stack]this : array!class(
      [stack]size'i32 = 0,
      [stack]data'ptr = 0 as ptr,
      [stack]_isGlobal'bool = false
    ))
  ))
  for x : 1 to 100000 {
    list_add([stack]this : list_add(
      parent: [stack]a,
      [heap]item'class : [heap]class([heap]this : class(
        [heap]x'i32 : x
      ))
    ))
  }
  [heap]c'class : [heap]list_getAt([stack]this : list_getAt(
    parent: [stack]a,
    [heap]index'i32 : 0
  ))
  this.x
}


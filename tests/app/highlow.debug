i32_random()'i32 {
  x'i32 = 0i
  --c--
  sjv_x = rand();
  --c--
  x
}

log(minlevel'loglevel=)'stack log {
  this
}

readline()'stack string {
  data'ptr = 0
  size'i32 = 1024i
  --c--
  char* str = (char*)malloc(size);
  int index = 0;
  char ch = ' ';
  do {
  ch = getchar();
  if (ch != '\n') {
  str[index] = ch;
  index++;
  if (index >= size) {
  size *= 2;
  str = (char*)realloc(str, size);
  }
  }
  } while (ch != '\n');
  str[index] = 0;
  index++;
  data = (void*)str;
  size = index;
  --c--
  string(this = string(
    count'i32 = count,
    data'stack array!char = data
  ))
}

string(count'i32=, data'stack array!char=)'stack string {
  this
}

string_asi32(text'stack string:)'i32 {
  x'i32 = 0i
  --c--
  char* e;
  int v = (int)strtol((char*)text->data.data, &e, 10);
  if (*e != '\0') {
  sjv_x = 0;
  }
  else {
  sjv_x = v;
  }
  --c--
  x
}

write(data'stack string:)'void {
  --c--
  printf("%s", (char*)data->data.data);
  --c--
}

global()'void {
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel
  ))
  emptystringdata'ptr = 0
  --c--
  sjv_emptystringdata = "";
  --c--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  --cinclude--
  #include <lib/common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/common/common.c>
  --cfunction--
  write(
    data'stack string : data
  )
  num'i32 : i32_random() %% 10i + 1i
  iscorrect'bool = false
  while !iscorrect{
    str'stack string : readline()
    guess'i32 : string_asi32(
      text'stack string : text
    )
    iscorrect'bool = if guess < num {
      write(
        data'stack string : data
      )
      false
    } else if guess > num {
      write(
        data'stack string : data
      )
      false
    } else {
      true
    }
  }
  write(
    data'stack string : data
  )
  void
}


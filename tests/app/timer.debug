anon1()'anon1 {
  this
}

anon2()'anon2 {
  this
}

anon3()'anon3 {
  this
}

anon4()'anon4 {
  this
}

array!#element([stack]size'i32=, [stack]data'ptr=, [stack]_isGlobal'bool=)'array_#element {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)calloc(_this->size * sizeof(#type(t)), 1);
			if (!_this->data) {
				printf("grow: out of memory\n");
				exit(-1);				
			}
		}
	
}c
  this
}

array!char([heap]size'i32=, [heap]data'ptr=, [heap]_isGlobal'bool=)'array_char {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)calloc(_this->size * sizeof(#type(t)), 1);
			if (!_this->data) {
				printf("grow: out of memory\n");
				exit(-1);				
			}
		}
	
}c
  this
}

array_setAt([stack]index'i32:, [heap]item'#element:)'void c{

		#forceParent()
		#forceHeap(item)

		if (index >= _parent->size || index < 0) {
			printf("setAt: out of bounds %d:%d\n", index, _parent->size);
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
##if !#isValue(t)
		if (p[index] != 0) {
			#release(t, p[index]);
		}
##endif
		#retain(t, item);
		p[index] = item;
	
}c

element ##element ([stack]id'string:, [stack]children'array_#element:)'element {
  this
}

string([heap]count'i32=, [heap]data'array_char=)'string {
  this
}

timerElement ##element ([stack]counter'i32=)'timerElement {
  this
}

global()'void {
  [heap]convert'anon4 : [heap]anon4([heap]this : anon4(
    parent: [stack]this
  ))
  [stack]random'anon3 : [stack]anon3([stack]this : anon3())
  [stack]parse'anon2 : [stack]anon2([stack]this : anon2())
  [stack]console'anon1 : [stack]anon1([stack]this : anon1())
  #element(
    toHTML()'string
  )
  [stack]timerElement'timerElement : [stack]timerElement([stack]this : timerElement(
    parent: [stack]this,
    [stack]counter'i32 = 0i
  ))
  [stack]rootElement'element : [stack]element([stack]this : element(
    parent: [stack]this,
    [stack]id'string : {
      [heap]string([heap]this : string(
        parent: [stack]this,
        [heap]count'i32 = i,
        [heap]data'array_char = [heap]array!char([heap]this : array!char(
          [heap]size'i32 = i,
          [heap]data'ptr = ,
          [heap]_isGlobal'bool = false
        ))
      ))
    },
    [stack]children'array_#element : {
      [stack]sjv_array1'array_#element : [stack]array!#element([stack]this : array!#element(
        [stack]size'i32 = i,
        [stack]data'ptr = 0i as ptr,
        [stack]_isGlobal'bool = false
      ))
      [stack]array_setAt([stack]this : array_setAt(
        parent: [stack]sjv_array1,
        [stack]index'i32 : i,
        [heap]item'#element : this.timerElement as #element
      ))
      sjv_array1
    }
  ))
  void
}


anon1()'anon1 {
  this
}

anon2()'anon2 {
  this
}

anon3()'anon3 {
  this
}

anon4()'anon4 {
  this
}

anon5()'anon5 {
  this
}

anon5_getFont([stack]typeId'i32:)'string {
  {
    [heap]string([heap]this : string(
      parent: [stack]this,
      [heap]count'i32 = i,
      [heap]data'array_char = [heap]array!char([heap]this : array!char(
        [heap]size'i32 = i,
        [heap]data'ptr = ,
        [heap]_isGlobal'bool = false
      ))
    ))
  }
}

array!#element([stack]size'i32=, [stack]data'ptr=, [stack]_isGlobal'bool=)'array_#element {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)calloc(_this->size * sizeof(#type(t)), 1);
			if (!_this->data) {
				printf("grow: out of memory\n");
				exit(-1);				
			}
		}
	
}c
  this
}

array!char([heap]size'i32=, [heap]data'ptr=, [heap]_isGlobal'bool=)'array_char {
  c{

		if (_this->size < 0) {
			exit(-1);
		}

		if (_this->data) {
			_this->_isGlobal = true;
		} else {
			_this->data = (uintptr_t)calloc(_this->size * sizeof(#type(t)), 1);
			if (!_this->data) {
				printf("grow: out of memory\n");
				exit(-1);				
			}
		}
	
}c
  this
}

array_setAt([stack]index'i32:, [heap]item'#element:)'void c{

		#forceParent()
		#forceHeap(item)

		if (index >= _parent->size || index < 0) {
			printf("setAt: out of bounds %d:%d\n", index, _parent->size);
			exit(-1);
		}

		#type(t)* p = (#type(t)*)_parent->data;
##if !#isValue(t)
		if (p[index] != 0) {
			#release(t, p[index]);
		}
##endif
		#retain(t, item);
		p[index] = item;
	
}c

button ##element ([stack]text'string=, [stack]font'string=, [heap]rect'rect=)'button {
  [heap]anon5_getFont([stack]this : anon5_getFont(
    parent: [heap].parentthis.style,
    [stack]typeId'i32 : 1i
  ))
  this
}

element ##element ([stack]children'array_#element:, [heap]rect'rect=)'element {
  this
}

htmlCanvas2d ##surface ([stack]ctxVarName'string:)'htmlCanvas2d {
  c{

		EM_ASM({
			var canvas = document.getElementById("canvas");
			var ctx = canvas.getContext('2d');
			window[UTF8ToString($0)] = ctx;
		}, _this->ctxVarName->data);
	
}c
  this
}

rect([heap]x'i32:, [heap]y'i32:, [heap]w'i32:, [heap]h'i32:)'rect {
  this
}

string([heap]count'i32=, [heap]data'array_char=)'string {
  this
}

global()'void {
  #surface(
    fillRect(rect'rect : undefined, color'color : undefined)'void
  )
  [heap]style'anon5 : [heap]anon5([heap]this : anon5(
    parent: [stack]this
  ))
  #element(
    setRect(rect'rect : undefined)'void
    render(surface'#surface : undefined)'void
  )
  [heap]convert'anon4 : [heap]anon4([heap]this : anon4(
    parent: [stack]this
  ))
  [stack]random'anon3 : [stack]anon3([stack]this : anon3())
  [stack]parse'anon2 : [stack]anon2([stack]this : anon2())
  [heap]console'anon1 : [heap]anon1([heap]this : anon1())
  [stack]root'#element? = empty'#element?
  [heap]rootCanvas'#surface : [stack]htmlCanvas2d([stack]this : htmlCanvas2d(
    parent: [stack]this,
    [stack]ctxVarName'string : {
      [heap]string([heap]this : string(
        parent: [stack]this,
        [heap]count'i32 = i,
        [heap]data'array_char = [heap]array!char([heap]this : array!char(
          [heap]size'i32 = i,
          [heap]data'ptr = ,
          [heap]_isGlobal'bool = false
        ))
      ))
    }
  )) as #surface
  cdefine{

	#include(<emscripten.h>)
	#include(<emscripten/html5.h>)

	EM_BOOL em_onClick(int eventType, const EmscriptenMouseEvent *mouseEvent, void *userData);

}cdefine
  cfunction{

	EM_BOOL em_onClick(int eventType, const EmscriptenMouseEvent *mouseEvent, void *userData) {
		#function(onClick)(&global, mouseEvent->timestamp, mouseEvent->targetX, mouseEvent->targetY);
		return true;
	}

}cfunction
  c{

	emscripten_set_click_callback(0, &global, false, em_onClick);

}c
  [stack]root'#element? = value([stack]element([stack]this : element(
    parent: [stack]this,
    [stack]children'array_#element : {
      [stack]sjv_array1'array_#element : [stack]array!#element([stack]this : array!#element(
        [stack]size'i32 = i,
        [stack]data'ptr = 0i as ptr,
        [stack]_isGlobal'bool = false
      ))
      [stack]array_setAt([stack]this : array_setAt(
        parent: [stack]sjv_array1,
        [stack]index'i32 : i,
        [heap]item'#element : [stack]button([stack]this : button(
          parent: [stack]this,
          [stack]text'string = {
            [heap]string([heap]this : string(
              parent: [stack]this,
              [heap]count'i32 = i,
              [heap]data'array_char = [heap]array!char([heap]this : array!char(
                [heap]size'i32 = i,
                [heap]data'ptr = ,
                [heap]_isGlobal'bool = false
              ))
            ))
          },
          [stack]font'string = [heap]anon5_getFont([stack]this : anon5_getFont(
            parent: [heap].parentthis.style,
            [stack]typeId'i32 : 0i
          )),
          [heap]rect'rect = [heap]rect([heap]this : rect(
            [heap]x'i32 : 0i,
            [heap]y'i32 : 0i,
            [heap]w'i32 : 0i,
            [heap]h'i32 : 0i
          ))
        )) as #element
      ))
      sjv_array1
    },
    [heap]rect'rect = [heap]rect([heap]this : rect(
      [heap]x'i32 : 0i,
      [heap]y'i32 : 0i,
      [heap]w'i32 : 0i,
      [heap]h'i32 : 0i
    ))
  )) as #element)
  void
}


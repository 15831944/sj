{"version":3,"sources":["timer.c"],"names":[],"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","file":"timer.html","sourcesContent":["#include <stdbool.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct td_int32_option int32_option;\nstruct td_int32_option {\n    bool isEmpty;\n    int32_t value;\n};\nconst int32_option int32_empty = { true };\n\ntypedef struct td_uint32_option uint32_option;\nstruct td_uint32_option {\n    bool isEmpty;\n    uint32_t value;\n};\nconst uint32_option uint32_empty = { true };\n\ntypedef struct td_int64_option int64_option;\nstruct td_int64_option {\n    bool isEmpty;\n    int64_t value;\n};\nconst int64_option int64_empty = { true };\n\ntypedef struct td_uint64_option uint64_option;\nstruct td_uint64_option {\n    bool isEmpty;\n    uint64_t value;\n};\nconst uint64_option uint64_empty = { true };\n\ntypedef struct td_uintptr_option uintptr_option;\nstruct td_uintptr_option {\n    bool isEmpty;\n    uintptr_t value;\n};\nconst uintptr_option uintptr_empty = { true };\n\ntypedef struct td_char_option char_option;\nstruct td_char_option {\n    bool isEmpty;\n    char value;\n};\nconst char_option char_empty = { true };\n\ntypedef struct td_float_option float_option;\nstruct td_float_option {\n    bool isEmpty;\n    float value;\n};\nconst float_option float_empty = { true };\n\ntypedef struct td_double_option double_option;\nstruct td_double_option {\n    bool isEmpty;\n    double value;\n};\nconst double_option double_empty = { true };\n\nconst char* sjg_string1 = \"root\";\nconst char* sjg_string2 = \"foo\";\nconst char* sjg_string3 = \"hi\";\nconst char* sjg_string4 = \"hello\";\nconst char* sjg_string5 = \"bye\";\nconst char* sjg_string6 = \"update - 1\";\nconst char* sjg_string7 = \"\";\nconst char* sjg_string8 = \"update - 3\";\nconst char* sjg_string9 = \"update - 2\";\n\n#define sji_element_typeId 1\n#define sjs_anon1_typeId 2\n#define sjs_anon2_typeId 3\n#define sjs_anon3_typeId 4\n#define sjs_anon4_typeId 5\n#define sjs_array_char_typeId 6\n#define sjs_array_sji_element_typeId 7\n#define sjs_element_typeId 8\n#define sjs_global_typeId 9\n#define sjs_object_typeId 10\n#define sjs_string_typeId 11\n#define sjs_timerElement_typeId 12\n\ntypedef struct td_sji_element sji_element;\ntypedef struct td_sjs_anon1 sjs_anon1;\ntypedef struct td_sjs_anon2 sjs_anon2;\ntypedef struct td_sjs_anon3 sjs_anon3;\ntypedef struct td_sjs_anon4 sjs_anon4;\ntypedef struct td_sjs_array_char sjs_array_char;\ntypedef struct td_sjs_array_sji_element sjs_array_sji_element;\ntypedef struct td_sjs_element sjs_element;\ntypedef struct td_sjs_global sjs_global;\ntypedef struct td_sjs_object sjs_object;\ntypedef struct td_sjs_string sjs_string;\ntypedef struct td_sjs_timerElement sjs_timerElement;\n\nstruct td_sji_element {\n    int _refCount;\n    sjs_object* _parent;\n    void (*destroy)(sjs_object* _this);\n    sjs_object* (*asInterface)(sjs_object* _this, int typeId);\n    void (*toHTML)(sjs_object* _parent, sjs_string** _return);\n};\n\nstruct td_sjs_anon1 {\n    int _refCount;\n};\n\nstruct td_sjs_anon2 {\n    int _refCount;\n};\n\nstruct td_sjs_anon3 {\n    int _refCount;\n};\n\nstruct td_sjs_anon4 {\n    int _refCount;\n    sjs_global* _parent;\n};\n\nstruct td_sjs_array_char {\n    int _refCount;\n    int32_t size;\n    uintptr_t data;\n    bool _isGlobal;\n};\n\nstruct td_sjs_array_sji_element {\n    int _refCount;\n    int32_t size;\n    uintptr_t data;\n    bool _isGlobal;\n};\n\nstruct td_sjs_element {\n    int _refCount;\n    sjs_global* _parent;\n    sjs_string* id;\n    sjs_array_sji_element* children;\n};\n\nstruct td_sjs_global {\n    int _refCount;\n    sjs_anon4* convert;\n    sjs_anon1* console;\n};\n\nstruct td_sjs_object {\n    int _refCount;\n};\n\nstruct td_sjs_string {\n    int _refCount;\n    sjs_global* _parent;\n    int32_t count;\n    sjs_array_char* data;\n};\n\nstruct td_sjs_timerElement {\n    int _refCount;\n    sjs_global* _parent;\n    int32_t counter;\n};\n\nvoid sjf_anon1(sjs_anon1* _this, sjs_anon1** _return);\nvoid sjf_anon1_destroy(sjs_anon1* _this);\nvoid sjf_anon1_write(sjs_anon1* _parent, sjs_string* data);\nvoid sjf_anon2(sjs_anon2* _this, sjs_anon2** _return);\nvoid sjf_anon2_destroy(sjs_anon2* _this);\nvoid sjf_anon3(sjs_anon3* _this, sjs_anon3** _return);\nvoid sjf_anon3_destroy(sjs_anon3* _this);\nvoid sjf_anon4(sjs_anon4* _this, sjs_anon4** _return);\nvoid sjf_anon4_destroy(sjs_anon4* _this);\nvoid sjf_anon4_i32toString(sjs_anon4* _parent, int32_t val, sjs_string** _return);\nvoid sjf_array_char(sjs_array_char* _this, sjs_array_char** _return);\nvoid sjf_array_char_destroy(sjs_array_char* _this);\nvoid sjf_array_char_getAt(sjs_array_char* _parent, int32_t index, char* _return);\nvoid sjf_array_char_grow(sjs_array_char* _parent, int32_t newSize, sjs_array_char** _return);\nvoid sjf_array_char_setAt(sjs_array_char* _parent, int32_t index, char item);\nvoid sjf_array_sji_element(sjs_array_sji_element* _this, sjs_array_sji_element** _return);\nvoid sjf_array_sji_element_destroy(sjs_array_sji_element* _this);\nvoid sjf_array_sji_element_getAt(sjs_array_sji_element* _parent, int32_t index, sji_element** _return);\nvoid sjf_array_sji_element_setAt(sjs_array_sji_element* _parent, int32_t index, sji_element* item);\nvoid sjf_element(sjs_element* _this, sjs_element** _return);\nsjs_object* sjf_element_asInterface(sjs_element* _this, int typeId);\nsji_element* sjf_element_as_sji_element(sjs_element* _this);\nvoid sjf_element_destroy(sjs_element* _this);\nvoid sjf_element_toHTML(sjs_element* _parent, sjs_string** _return);\nvoid sjf_element_update(sjs_element* _parent);\nvoid sjf_global(sjs_global* _this);\nvoid sjf_global_destroy(sjs_global* _this);\nvoid sjf_string(sjs_string* _this, sjs_string** _return);\nvoid sjf_string_add(sjs_string* _parent, sjs_string* item, sjs_string** _return);\nvoid sjf_string_destroy(sjs_string* _this);\nvoid sjf_string_getAt(sjs_string* _parent, int32_t index, char* _return);\nvoid sjf_timerElement(sjs_timerElement* _this, sjs_timerElement** _return);\nsjs_object* sjf_timerElement_asInterface(sjs_timerElement* _this, int typeId);\nsji_element* sjf_timerElement_as_sji_element(sjs_timerElement* _this);\nvoid sjf_timerElement_destroy(sjs_timerElement* _this);\nvoid sjf_timerElement_toHTML(sjs_timerElement* _parent, sjs_string** _return);\nvoid sji_element_destroy(sji_element* _this);\n\nvoid sjf_anon1(sjs_anon1* _this, sjs_anon1** _return) {\n    _this->_refCount++;\n\n    *_return = _this;\n}\n\nvoid sjf_anon1_destroy(sjs_anon1* _this) {\n}\n\nvoid sjf_anon1_write(sjs_anon1* _parent, sjs_string* data) {\n    \n\t\t\t\n\t\t\t\n\t\t\tprintf(\"%s\\n\", (char*)data->data->data);\n\t\t;\n}\n\nvoid sjf_anon2(sjs_anon2* _this, sjs_anon2** _return) {\n    _this->_refCount++;\n\n    *_return = _this;\n}\n\nvoid sjf_anon2_destroy(sjs_anon2* _this) {\n}\n\nvoid sjf_anon3(sjs_anon3* _this, sjs_anon3** _return) {\n    _this->_refCount++;\n\n    *_return = _this;\n}\n\nvoid sjf_anon3_destroy(sjs_anon3* _this) {\n}\n\nvoid sjf_anon4(sjs_anon4* _this, sjs_anon4** _return) {\n    _this->_refCount++;\n\n    *_return = _this;\n}\n\nvoid sjf_anon4_destroy(sjs_anon4* _this) {\n}\n\nvoid sjf_anon4_i32toString(sjs_anon4* _parent, int32_t val, sjs_string** _return) {\n    int32_t count;\n    uintptr_t data;\n    uintptr_t result3;\n    int32_t result4;\n    sjs_array_char* sjv_temp8;\n    sjs_string* sjv_temp9;\n\n    count = 0;\n    result3 = (uintptr_t)0;\n    data = result3;\n    \n\t\t\tchar buf[32] = { 0 };\n\t\t\tint i = 30;\t\n\t\t\tfor(; val && i ; --i, val /= 10)\t\n\t\t\t\tbuf[i] = \"0123456789\"[val % 10];\t\n\n\t\t\tcount = 30 - i;\n\t\t\tdata = (uintptr_t)malloc(sizeof(char) * (count + 1));\n\t\t\tmemcpy(&buf[i+1], (void*)data, count + 1);\n\t\t;\n    result4 = count + 1;\n    sjv_temp8 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n    sjv_temp8->_refCount = 1;\n    sjv_temp8->size = result4;\n    sjv_temp8->data = data;\n    sjv_temp8->_isGlobal = false;\n    sjf_array_char(sjv_temp8, &sjv_temp8);\n    sjv_temp9 = (sjs_string*)malloc(sizeof(sjs_string));\n    sjv_temp9->_refCount = 1;\n    sjv_temp9->count = count;\n    sjv_temp9->data = sjv_temp8;\n    sjv_temp9->data->_refCount++;\n    sjf_string(sjv_temp9, &sjv_temp9);\n    sjv_temp9->_refCount++;\n\n    sjv_temp8->_refCount--;\n    if (sjv_temp8->_refCount <= 0) {\n        sjf_array_char_destroy(sjv_temp8);\n        free(sjv_temp8);\n    }\n    sjv_temp9->_refCount--;\n    if (sjv_temp9->_refCount <= 0) {\n        sjf_string_destroy(sjv_temp9);\n        free(sjv_temp9);\n    }\n\n    *_return = sjv_temp9;\n}\n\nvoid sjf_array_char(sjs_array_char* _this, sjs_array_char** _return) {\n    \n\t\tif (_this->size < 0) {\n\t\t\texit(-1);\n\t\t}\n\n\t\tif (_this->data) {\n\t\t\t_this->_isGlobal = true;\n\t\t} else {\n\t\t\t_this->data = (uintptr_t)calloc(_this->size * sizeof(char), 1);\n\t\t\tif (!_this->data) {\n\t\t\t\tprintf(\"grow: out of memory\\n\");\n\t\t\t\texit(-1);\t\t\t\t\n\t\t\t}\n\t\t}\n\t;\n    _this->_refCount++;\n\n    *_return = _this;\n}\n\nvoid sjf_array_char_destroy(sjs_array_char* _this) {\n    \n\tif (!_this->_isGlobal && _this->data) {\n\t\tfree((char*)_this->data);\n\t\t_this->data = 0;\t\n\t}\n;\n}\n\nvoid sjf_array_char_getAt(sjs_array_char* _parent, int32_t index, char* _return) {\n    \n\t\t\n\n\t\tif (index >= _parent->size || index < 0) {\n\t\t\tprintf(\"getAt: out of bounds\\n\");\n\t\t\texit(-1);\n\t\t}\n\n\t\tchar* p = (char*)_parent->data;\n\t\tchar val = p[index];\n#if !true\n\t\tif (val == 0) {\n\t\t\tprintf(\"getAt: value is not defined at %d\\n\", index);\n\t\t\texit(-1);\n\t\t}\n#endif\n\t\t*_return = val;\t\t\n\t;\n}\n\nvoid sjf_array_char_grow(sjs_array_char* _parent, int32_t newSize, sjs_array_char** _return) {\n    \n\t\t\n\t\t\n\n\t\tif (_parent->size != newSize) {\n\t\t\tif (newSize < _parent->size) {\n\t\t\t\tprintf(\"grow: new size smaller than old size %d:%d\\n\", newSize, _parent->size);\n\t\t\t\texit(-1);\n\t\t\t}\n\t\t\t\n\t\t\tif (_parent->_isGlobal) {\n\t\t\t\t_parent->_isGlobal = false;\n\t\t\t\tchar* p = (char*)_parent->data;\n\t\t\t\t_parent->data = (uintptr_t)calloc(newSize * sizeof(char), 1);\n\t\t\t\tif (!_parent->data) {\n\t\t\t\t\tprintf(\"grow: out of memory\\n\");\n\t\t\t\t\texit(-1);\t\t\t\t\n\t\t\t\t}\n\t\t\t\tmemcpy((void*)_parent->data, p, _parent->size * sizeof(char));\n\t\t\t} else {\n\t\t\t\t_parent->data = (uintptr_t)realloc((void*)_parent->data, newSize * sizeof(char));\n\t\t\t\tif (!_parent->data) {\n\t\t\t\t\tprintf(\"grow: out of memory\\n\");\n\t\t\t\t\texit(-1);\t\t\t\t\n\t\t\t\t}\n\t\t\t\tmemset((void*)_parent->data + _parent->size, 0, newSize - _parent->size);\n\t\t\t}\n\t\t\t_parent->size = newSize;\n\t\t}\n\n\t\t*_return = _parent;\n\t;\n}\n\nvoid sjf_array_char_setAt(sjs_array_char* _parent, int32_t index, char item) {\n    \n\t\t\n\t\t\n\n\t\tif (index >= _parent->size || index < 0) {\n\t\t\tprintf(\"setAt: out of bounds %d:%d\\n\", index, _parent->size);\n\t\t\texit(-1);\n\t\t}\n\n\t\tchar* p = (char*)_parent->data;\n#if !true\n\t\tif (p[index] != 0) {\n\t\t\t;\n\t\t}\n#endif\n\t\t;\n\t\tp[index] = item;\n\t;\n}\n\nvoid sjf_array_sji_element(sjs_array_sji_element* _this, sjs_array_sji_element** _return) {\n    \n\t\tif (_this->size < 0) {\n\t\t\texit(-1);\n\t\t}\n\n\t\tif (_this->data) {\n\t\t\t_this->_isGlobal = true;\n\t\t} else {\n\t\t\t_this->data = (uintptr_t)calloc(_this->size * sizeof(sji_element*), 1);\n\t\t\tif (!_this->data) {\n\t\t\t\tprintf(\"grow: out of memory\\n\");\n\t\t\t\texit(-1);\t\t\t\t\n\t\t\t}\n\t\t}\n\t;\n    _this->_refCount++;\n\n    *_return = _this;\n}\n\nvoid sjf_array_sji_element_destroy(sjs_array_sji_element* _this) {\n    \n\tif (!_this->_isGlobal && _this->data) {\n\t\tfree((sji_element**)_this->data);\n\t\t_this->data = 0;\t\n\t}\n;\n}\n\nvoid sjf_array_sji_element_getAt(sjs_array_sji_element* _parent, int32_t index, sji_element** _return) {\n    \n\t\t\n\n\t\tif (index >= _parent->size || index < 0) {\n\t\t\tprintf(\"getAt: out of bounds\\n\");\n\t\t\texit(-1);\n\t\t}\n\n\t\tsji_element** p = (sji_element**)_parent->data;\n\t\tsji_element* val = p[index];\n#if !false\n\t\tif (val == 0) {\n\t\t\tprintf(\"getAt: value is not defined at %d\\n\", index);\n\t\t\texit(-1);\n\t\t}\n#endif\n\t\t*_return = val;\t\t\n\t;\n}\n\nvoid sjf_array_sji_element_setAt(sjs_array_sji_element* _parent, int32_t index, sji_element* item) {\n    \n\t\t\n\t\t\n\n\t\tif (index >= _parent->size || index < 0) {\n\t\t\tprintf(\"setAt: out of bounds %d:%d\\n\", index, _parent->size);\n\t\t\texit(-1);\n\t\t}\n\n\t\tsji_element** p = (sji_element**)_parent->data;\n#if !false\n\t\tif (p[index] != 0) {\n\t\t\t p[index]->_refCount--;\nif ( p[index]->_refCount <= 0) {\n    sji_element_destroy( p[index]);\n    free( p[index]);\n}\n;\n\t\t}\n#endif\n\t\t item->_refCount++;\n;\n\t\tp[index] = item;\n\t;\n}\n\nvoid sjf_element(sjs_element* _this, sjs_element** _return) {\n    _this->_refCount++;\n\n    *_return = _this;\n}\n\nsjs_object* sjf_element_asInterface(sjs_element* _this, int typeId) {\n    switch (typeId) {\n        case sji_element_typeId: return (sjs_object*)sjf_element_as_sji_element(_this);\n    }\n\n    return 0;\n}\n\nsji_element* sjf_element_as_sji_element(sjs_element* _this) {\n    sji_element* _interface = (sji_element*)malloc(sizeof(sji_element));\n    _interface->_refCount = 1;\n    _interface->_parent = (sjs_object*)_this;\n    _interface->_parent->_refCount++;\n    _interface->destroy = (void(*)(sjs_object*))sjf_element_destroy;\n    _interface->asInterface = (sjs_object*(*)(sjs_object*,int))sjf_element_asInterface;\n    _interface->toHTML = (void(*)(sjs_object*, sjs_string**))sjf_element_toHTML;\n    return _interface;\n}\n\nvoid sjf_element_destroy(sjs_element* _this) {\n    sjf_string_destroy(_this->id);\n    sjf_array_sji_element_destroy(_this->children);\n}\n\nvoid sjf_element_toHTML(sjs_element* _parent, sjs_string** _return) {\n    sjs_array_char* sjv_temp13;\n    sjs_string* sjv_temp14;\n\n    sjv_temp13 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n    sjv_temp13->_refCount = 1;\n    sjv_temp13->size = 3;\n    sjv_temp13->data = (uintptr_t)sjg_string3;\n    sjv_temp13->_isGlobal = false;\n    sjf_array_char(sjv_temp13, &sjv_temp13);\n    sjv_temp14 = (sjs_string*)malloc(sizeof(sjs_string));\n    sjv_temp14->_refCount = 1;\n    sjv_temp14->count = 2;\n    sjv_temp14->data = sjv_temp13;\n    sjv_temp14->data->_refCount++;\n    sjf_string(sjv_temp14, &sjv_temp14);\n    sjv_temp14->_refCount++;\n\n    sjv_temp13->_refCount--;\n    if (sjv_temp13->_refCount <= 0) {\n        sjf_array_char_destroy(sjv_temp13);\n        free(sjv_temp13);\n    }\n    sjv_temp14->_refCount--;\n    if (sjv_temp14->_refCount <= 0) {\n        sjf_string_destroy(sjv_temp14);\n        free(sjv_temp14);\n    }\n\n    *_return = sjv_temp14;\n}\n\nvoid sjf_element_update(sjs_element* _parent) {\n    sjs_anon1* dotTemp19;\n    sjs_array_sji_element* dotTemp20;\n    int32_t dotTemp21;\n    sjs_anon1* dotTemp25;\n    sjs_string* html;\n    int32_t i;\n    int32_t loopEnd2;\n    sjs_array_char* sjv_temp20;\n    sjs_string* sjv_temp21;\n    sjs_array_char* sjv_temp22;\n    sjs_string* sjv_temp23;\n    sjs_array_char* sjv_temp26;\n    sjs_string* sjv_temp27;\n    sjs_global* tempParent2;\n    sjs_global* tempParent5;\n\n    tempParent2 = _parent->_parent;\n    dotTemp19 = tempParent2->console;\n    sjv_temp20 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n    sjv_temp20->_refCount = 1;\n    sjv_temp20->size = 11;\n    sjv_temp20->data = (uintptr_t)sjg_string6;\n    sjv_temp20->_isGlobal = false;\n    sjf_array_char(sjv_temp20, &sjv_temp20);\n    sjv_temp21 = (sjs_string*)malloc(sizeof(sjs_string));\n    sjv_temp21->_refCount = 1;\n    sjv_temp21->count = 10;\n    sjv_temp21->data = sjv_temp20;\n    sjv_temp21->data->_refCount++;\n    sjf_string(sjv_temp21, &sjv_temp21);\n    sjf_anon1_write(dotTemp19, sjv_temp21);\n    sjv_temp22 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n    sjv_temp22->_refCount = 1;\n    sjv_temp22->size = 1;\n    sjv_temp22->data = (uintptr_t)sjg_string7;\n    sjv_temp22->_isGlobal = false;\n    sjf_array_char(sjv_temp22, &sjv_temp22);\n    sjv_temp23 = (sjs_string*)malloc(sizeof(sjs_string));\n    sjv_temp23->_refCount = 1;\n    sjv_temp23->count = 0;\n    sjv_temp23->data = sjv_temp22;\n    sjv_temp23->data->_refCount++;\n    sjf_string(sjv_temp23, &sjv_temp23);\n    html = sjv_temp23;\n    html->_refCount++;\n    i = 0;\n    dotTemp20 = _parent->children;\n    dotTemp21 = dotTemp20->size;\n    loopEnd2 = dotTemp21;\n    while (i < loopEnd2) {\n        sji_element sjd_temp7;\n        sji_element* child;\n        sjs_anon1* dotTemp22;\n        sjs_array_sji_element* dotTemp23;\n        sjs_anon1* dotTemp24;\n        sji_element* result16;\n        sjs_string* result17;\n        sjs_string* result18;\n        sjs_array_char* sjv_temp24;\n        sjs_string* sjv_temp25;\n        sjs_global* tempParent3;\n        sjs_global* tempParent4;\n\n        tempParent3 = _parent->_parent;\n        dotTemp22 = tempParent3->console;\n        sjv_temp24 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n        sjv_temp24->_refCount = 1;\n        sjv_temp24->size = 11;\n        sjv_temp24->data = (uintptr_t)sjg_string8;\n        sjv_temp24->_isGlobal = false;\n        sjf_array_char(sjv_temp24, &sjv_temp24);\n        sjv_temp25 = (sjs_string*)malloc(sizeof(sjs_string));\n        sjv_temp25->_refCount = 1;\n        sjv_temp25->count = 10;\n        sjv_temp25->data = sjv_temp24;\n        sjv_temp25->data->_refCount++;\n        sjf_string(sjv_temp25, &sjv_temp25);\n        sjf_anon1_write(dotTemp22, sjv_temp25);\n        dotTemp23 = _parent->children;\n        result16 = &sjd_temp7;\n        sjf_array_sji_element_getAt(dotTemp23, i, &result16);\n        child = result16;\n        child->_refCount++;\n        result17 = 0;\n        result18 = 0;\n        child->toHTML(child->_parent, &result18);\n        sjf_string_add(html, result18, &result17);\n        tempParent4 = _parent->_parent;\n        dotTemp24 = tempParent4->console;\n        sjf_anon1_write(dotTemp24, html);\n        i++;\n\n        result17->_refCount--;\n        if (result17->_refCount <= 0) {\n            sjf_string_destroy(result17);\n            free(result17);\n        }\n        result18->_refCount--;\n        if (result18->_refCount <= 0) {\n            sjf_string_destroy(result18);\n            free(result18);\n        }\n        sjv_temp24->_refCount--;\n        if (sjv_temp24->_refCount <= 0) {\n            sjf_array_char_destroy(sjv_temp24);\n            free(sjv_temp24);\n        }\n        sjv_temp25->_refCount--;\n        if (sjv_temp25->_refCount <= 0) {\n            sjf_string_destroy(sjv_temp25);\n            free(sjv_temp25);\n        }\n        sji_element_destroy(&sjd_temp7);\n    }\n\n    tempParent5 = _parent->_parent;\n\n    dotTemp25 = tempParent5->console;\n\n    sjv_temp26 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n\n    sjv_temp26->_refCount = 1;\n\n    sjv_temp26->size = 11;\n\n    sjv_temp26->data = (uintptr_t)sjg_string9;\n\n    sjv_temp26->_isGlobal = false;\n\n    sjf_array_char(sjv_temp26, &sjv_temp26);\n\n    sjv_temp27 = (sjs_string*)malloc(sizeof(sjs_string));\n\n    sjv_temp27->_refCount = 1;\n\n    sjv_temp27->count = 10;\n\n    sjv_temp27->data = sjv_temp26;\n\n    sjv_temp27->data->_refCount++;\n\n    sjf_string(sjv_temp27, &sjv_temp27);\n\n    sjf_anon1_write(dotTemp25, sjv_temp27);\n\n    html->_refCount--;\n    if (html->_refCount <= 0) {\n        sjf_string_destroy(html);\n        free(html);\n    }\n    sjv_temp20->_refCount--;\n    if (sjv_temp20->_refCount <= 0) {\n        sjf_array_char_destroy(sjv_temp20);\n        free(sjv_temp20);\n    }\n    sjv_temp21->_refCount--;\n    if (sjv_temp21->_refCount <= 0) {\n        sjf_string_destroy(sjv_temp21);\n        free(sjv_temp21);\n    }\n    sjv_temp22->_refCount--;\n    if (sjv_temp22->_refCount <= 0) {\n        sjf_array_char_destroy(sjv_temp22);\n        free(sjv_temp22);\n    }\n    sjv_temp23->_refCount--;\n    if (sjv_temp23->_refCount <= 0) {\n        sjf_string_destroy(sjv_temp23);\n        free(sjv_temp23);\n    }\n    sjv_temp26->_refCount--;\n    if (sjv_temp26->_refCount <= 0) {\n        sjf_array_char_destroy(sjv_temp26);\n        free(sjv_temp26);\n    }\n    sjv_temp27->_refCount--;\n    if (sjv_temp27->_refCount <= 0) {\n        sjf_string_destroy(sjv_temp27);\n        free(sjv_temp27);\n    }\n}\n\nvoid sjf_global(sjs_global* _this) {\n    sjs_anon3 sjd_temp1;\n    sjs_anon2 sjd_temp2;\n    sjs_array_sji_element sjd_temp3;\n    sjs_timerElement sjd_temp5;\n    sjs_element sjd_temp6;\n    sjs_string* a;\n    sjs_string* b;\n    sjs_string* c;\n    sjs_anon1* dotTemp18;\n    sjs_anon2* parse;\n    sjs_anon3* random;\n    uintptr_t result1;\n    sji_element* result14;\n    sjs_string* result15;\n    sjs_element* rootElement;\n    sjs_array_sji_element* sjv_array1;\n    sjs_anon4* sjv_temp1;\n    sjs_timerElement* sjv_temp12;\n    sjs_element* sjv_temp15;\n    sjs_array_char* sjv_temp16;\n    sjs_string* sjv_temp17;\n    sjs_array_char* sjv_temp18;\n    sjs_string* sjv_temp19;\n    sjs_anon3* sjv_temp2;\n    sjs_anon2* sjv_temp3;\n    sjs_anon1* sjv_temp4;\n    sjs_array_char* sjv_temp5;\n    sjs_string* sjv_temp6;\n    sjs_array_sji_element* sjv_temp7;\n\n    sjv_temp1 = (sjs_anon4*)malloc(sizeof(sjs_anon4));\n    sjv_temp1->_refCount = 1;\n    sjf_anon4(sjv_temp1, &sjv_temp1);\n    _this->convert = sjv_temp1;\n    _this->convert->_refCount++;\n    sjv_temp2 = &sjd_temp1;\n    sjv_temp2->_refCount = 1;\n    sjf_anon3(sjv_temp2, &sjv_temp2);\n    random = sjv_temp2;\n    random->_refCount++;\n    sjv_temp3 = &sjd_temp2;\n    sjv_temp3->_refCount = 1;\n    sjf_anon2(sjv_temp3, &sjv_temp3);\n    parse = sjv_temp3;\n    parse->_refCount++;\n    sjv_temp4 = (sjs_anon1*)malloc(sizeof(sjs_anon1));\n    sjv_temp4->_refCount = 1;\n    sjf_anon1(sjv_temp4, &sjv_temp4);\n    _this->console = sjv_temp4;\n    _this->console->_refCount++;\n    sjv_temp5 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n    sjv_temp5->_refCount = 1;\n    sjv_temp5->size = 5;\n    sjv_temp5->data = (uintptr_t)sjg_string1;\n    sjv_temp5->_isGlobal = false;\n    sjf_array_char(sjv_temp5, &sjv_temp5);\n    sjv_temp6 = (sjs_string*)malloc(sizeof(sjs_string));\n    sjv_temp6->_refCount = 1;\n    sjv_temp6->count = 4;\n    sjv_temp6->data = sjv_temp5;\n    sjv_temp6->data->_refCount++;\n    sjf_string(sjv_temp6, &sjv_temp6);\n    result1 = (uintptr_t)0;\n    sjv_temp7 = &sjd_temp3;\n    sjv_temp7->_refCount = 1;\n    sjv_temp7->size = 1;\n    sjv_temp7->data = result1;\n    sjv_temp7->_isGlobal = false;\n    sjf_array_sji_element(sjv_temp7, &sjv_temp7);\n    sjv_array1 = sjv_temp7;\n    sjv_array1->_refCount++;\n    sjv_temp12 = &sjd_temp5;\n    sjv_temp12->_refCount = 1;\n    sjv_temp12->counter = 0;\n    sjf_timerElement(sjv_temp12, &sjv_temp12);\n    result14 = sjf_timerElement_as_sji_element(sjv_temp12);\n    sjf_array_sji_element_setAt(sjv_array1, 0, result14);\n    sjv_temp15 = &sjd_temp6;\n    sjv_temp15->_refCount = 1;\n    sjv_temp15->id = sjv_temp6;\n    sjv_temp15->id->_refCount++;\n    sjv_temp15->children = sjv_array1;\n    sjv_temp15->children->_refCount++;\n    sjf_element(sjv_temp15, &sjv_temp15);\n    rootElement = sjv_temp15;\n    rootElement->_refCount++;\n    sjv_temp16 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n    sjv_temp16->_refCount = 1;\n    sjv_temp16->size = 6;\n    sjv_temp16->data = (uintptr_t)sjg_string4;\n    sjv_temp16->_isGlobal = false;\n    sjf_array_char(sjv_temp16, &sjv_temp16);\n    sjv_temp17 = (sjs_string*)malloc(sizeof(sjs_string));\n    sjv_temp17->_refCount = 1;\n    sjv_temp17->count = 5;\n    sjv_temp17->data = sjv_temp16;\n    sjv_temp17->data->_refCount++;\n    sjf_string(sjv_temp17, &sjv_temp17);\n    a = sjv_temp17;\n    a->_refCount++;\n    sjv_temp18 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n    sjv_temp18->_refCount = 1;\n    sjv_temp18->size = 4;\n    sjv_temp18->data = (uintptr_t)sjg_string5;\n    sjv_temp18->_isGlobal = false;\n    sjf_array_char(sjv_temp18, &sjv_temp18);\n    sjv_temp19 = (sjs_string*)malloc(sizeof(sjs_string));\n    sjv_temp19->_refCount = 1;\n    sjv_temp19->count = 3;\n    sjv_temp19->data = sjv_temp18;\n    sjv_temp19->data->_refCount++;\n    sjf_string(sjv_temp19, &sjv_temp19);\n    b = sjv_temp19;\n    b->_refCount++;\n    result15 = 0;\n    sjf_string_add(a, b, &result15);\n    c = result15;\n    c->_refCount++;\n    dotTemp18 = _this->console;\n    sjf_anon1_write(dotTemp18, c);\n    sjf_element_update(rootElement);\n\n    a->_refCount--;\n    if (a->_refCount <= 0) {\n        sjf_string_destroy(a);\n        free(a);\n    }\n    b->_refCount--;\n    if (b->_refCount <= 0) {\n        sjf_string_destroy(b);\n        free(b);\n    }\n    c->_refCount--;\n    if (c->_refCount <= 0) {\n        sjf_string_destroy(c);\n        free(c);\n    }\n    result15->_refCount--;\n    if (result15->_refCount <= 0) {\n        sjf_string_destroy(result15);\n        free(result15);\n    }\n    sjv_temp1->_refCount--;\n    if (sjv_temp1->_refCount <= 0) {\n        sjf_anon4_destroy(sjv_temp1);\n        free(sjv_temp1);\n    }\n    sjv_temp16->_refCount--;\n    if (sjv_temp16->_refCount <= 0) {\n        sjf_array_char_destroy(sjv_temp16);\n        free(sjv_temp16);\n    }\n    sjv_temp17->_refCount--;\n    if (sjv_temp17->_refCount <= 0) {\n        sjf_string_destroy(sjv_temp17);\n        free(sjv_temp17);\n    }\n    sjv_temp18->_refCount--;\n    if (sjv_temp18->_refCount <= 0) {\n        sjf_array_char_destroy(sjv_temp18);\n        free(sjv_temp18);\n    }\n    sjv_temp19->_refCount--;\n    if (sjv_temp19->_refCount <= 0) {\n        sjf_string_destroy(sjv_temp19);\n        free(sjv_temp19);\n    }\n    sjv_temp4->_refCount--;\n    if (sjv_temp4->_refCount <= 0) {\n        sjf_anon1_destroy(sjv_temp4);\n        free(sjv_temp4);\n    }\n    sjv_temp5->_refCount--;\n    if (sjv_temp5->_refCount <= 0) {\n        sjf_array_char_destroy(sjv_temp5);\n        free(sjv_temp5);\n    }\n    sjv_temp6->_refCount--;\n    if (sjv_temp6->_refCount <= 0) {\n        sjf_string_destroy(sjv_temp6);\n        free(sjv_temp6);\n    }\n    sjf_anon3_destroy(&sjd_temp1);\n    sjf_anon2_destroy(&sjd_temp2);\n    sjf_array_sji_element_destroy(&sjd_temp3);\n    sjf_timerElement_destroy(&sjd_temp5);\n    sjf_element_destroy(&sjd_temp6);\n}\n\nvoid sjf_global_destroy(sjs_global* _this) {\n}\n\nvoid sjf_string(sjs_string* _this, sjs_string** _return) {\n    _this->_refCount++;\n\n    *_return = _this;\n}\n\nvoid sjf_string_add(sjs_string* _parent, sjs_string* item, sjs_string** _return) {\n    int32_t dotTemp11;\n    sjs_array_char* dotTemp16;\n    int32_t dotTemp17;\n    int32_t dotTemp3;\n    int32_t dotTemp4;\n    sjs_array_char* dotTemp5;\n    int32_t dotTemp6;\n    int32_t i;\n    int32_t loopEnd1;\n    char result13;\n    int32_t result6;\n    bool result7;\n\n    dotTemp3 = _parent->count;\n    dotTemp4 = item->count;\n    result6 = dotTemp3 + dotTemp4;\n    dotTemp5 = _parent->data;\n    dotTemp6 = dotTemp5->size;\n    result7 = result6 > dotTemp6;\n    if (result7) {\n        sjs_array_char sjd_temp4;\n        int32_t dotTemp10;\n        sjs_array_char* dotTemp7;\n        sjs_array_char* dotTemp8;\n        int32_t dotTemp9;\n        sjs_array_char* result8;\n        int32_t result9;\n\n        \n\t\t\t\tprintf(\"string.add: %d %d\\n\", _parent->data->size, item->count);\n\t\t\t;\n        dotTemp7 = _parent->data;\n        result8 = &sjd_temp4;\n        dotTemp8 = _parent->data;\n        dotTemp9 = dotTemp8->size;\n        dotTemp10 = item->count;\n        result9 = dotTemp9 + dotTemp10;\n        sjf_array_char_grow(dotTemp7, result9, &result8);\n        sjf_array_char_destroy(&sjd_temp4);\n    }\n\n    i = 0;\n\n    dotTemp11 = item->count;\n\n    loopEnd1 = dotTemp11;\n\n    while (i < loopEnd1) {\n        sjs_array_char* dotTemp12;\n        int32_t dotTemp13;\n        int32_t dotTemp15;\n        char result10;\n        int32_t result12;\n\n        \n\t\t\t\tprintf(\"string.add: %d:%d %d:%d\\n\", _parent->count, _parent->data->size, i, item->data->size);\n\t\t\t;\n        dotTemp12 = _parent->data;\n        dotTemp13 = _parent->count;\n        result10 = 0;\n        sjf_string_getAt(item, i, &result10);\n        sjf_array_char_setAt(dotTemp12, dotTemp13, result10);\n        dotTemp15 = _parent->count;\n        result12 = dotTemp15 + 1;\n        _parent->count = result12;\n        i++;\n    }\n\n    dotTemp16 = _parent->data;\n\n    dotTemp17 = _parent->count;\n\n    result13 = (char)0;\n\n    sjf_array_char_setAt(dotTemp16, dotTemp17, result13);\n\n    _parent->_refCount++;\n\n    *_return = _parent;\n}\n\nvoid sjf_string_destroy(sjs_string* _this) {\n    _this->data->_refCount--;\n    if (_this->data->_refCount <= 0) {\n        sjf_array_char_destroy(_this->data);\n        free(_this->data);\n    }\n}\n\nvoid sjf_string_getAt(sjs_string* _parent, int32_t index, char* _return) {\n    sjs_array_char* dotTemp14;\n    char result11;\n\n    dotTemp14 = _parent->data;\n    result11 = 0;\n    sjf_array_char_getAt(dotTemp14, index, &result11);\n\n    *_return = result11;\n}\n\nvoid sjf_timerElement(sjs_timerElement* _this, sjs_timerElement** _return) {\n    _this->_refCount++;\n\n    *_return = _this;\n}\n\nsjs_object* sjf_timerElement_asInterface(sjs_timerElement* _this, int typeId) {\n    switch (typeId) {\n        case sji_element_typeId: return (sjs_object*)sjf_timerElement_as_sji_element(_this);\n    }\n\n    return 0;\n}\n\nsji_element* sjf_timerElement_as_sji_element(sjs_timerElement* _this) {\n    sji_element* _interface = (sji_element*)malloc(sizeof(sji_element));\n    _interface->_refCount = 1;\n    _interface->_parent = (sjs_object*)_this;\n    _interface->_parent->_refCount++;\n    _interface->destroy = (void(*)(sjs_object*))sjf_timerElement_destroy;\n    _interface->asInterface = (sjs_object*(*)(sjs_object*,int))sjf_timerElement_asInterface;\n    _interface->toHTML = (void(*)(sjs_object*, sjs_string**))sjf_timerElement_toHTML;\n    return _interface;\n}\n\nvoid sjf_timerElement_destroy(sjs_timerElement* _this) {\n}\n\nvoid sjf_timerElement_toHTML(sjs_timerElement* _parent, sjs_string** _return) {\n    sjs_anon4* dotTemp1;\n    int32_t dotTemp2;\n    sjs_string* result2;\n    sjs_string* result5;\n    sjs_array_char* sjv_temp10;\n    sjs_string* sjv_temp11;\n    sjs_global* tempParent1;\n\n    tempParent1 = _parent->_parent;\n    dotTemp1 = tempParent1->convert;\n    result2 = 0;\n    dotTemp2 = _parent->counter;\n    sjf_anon4_i32toString(dotTemp1, dotTemp2, &result2);\n    result5 = 0;\n    sjv_temp10 = (sjs_array_char*)malloc(sizeof(sjs_array_char));\n    sjv_temp10->_refCount = 1;\n    sjv_temp10->size = 4;\n    sjv_temp10->data = (uintptr_t)sjg_string2;\n    sjv_temp10->_isGlobal = false;\n    sjf_array_char(sjv_temp10, &sjv_temp10);\n    sjv_temp11 = (sjs_string*)malloc(sizeof(sjs_string));\n    sjv_temp11->_refCount = 1;\n    sjv_temp11->count = 3;\n    sjv_temp11->data = sjv_temp10;\n    sjv_temp11->data->_refCount++;\n    sjf_string(sjv_temp11, &sjv_temp11);\n    sjf_string_add(result2, sjv_temp11, &result5);\n\n    result2->_refCount--;\n    if (result2->_refCount <= 0) {\n        sjf_string_destroy(result2);\n        free(result2);\n    }\n    sjv_temp10->_refCount--;\n    if (sjv_temp10->_refCount <= 0) {\n        sjf_array_char_destroy(sjv_temp10);\n        free(sjv_temp10);\n    }\n    sjv_temp11->_refCount--;\n    if (sjv_temp11->_refCount <= 0) {\n        sjf_string_destroy(sjv_temp11);\n        free(sjv_temp11);\n    }\n\n    *_return = result5;\n}\n\nvoid sji_element_destroy(sji_element* _this) {\n    _this->_parent->_refCount--;\n    if (_this->_parent->_refCount <= 0) {\n        _this->destroy(_this->_parent);\n        free(_this->_parent);\n    }\n}\n\nint main() {\n    sjs_global sjd_temp8;\n    sjs_global* sjv_temp28;\n\n    sjv_temp28 = &sjd_temp8;\n    sjv_temp28->_refCount = 1;\n    sjf_global(sjv_temp28);\n    sjf_global_destroy(&sjd_temp8);\n\n    return 0;\n}\n"]}